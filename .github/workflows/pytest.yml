name: Run pytest

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

env:
  # in a PR, the secrets will be empty
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, macos-12, windows-2022]
        python-version: ["3.9", "3.10", "3.11", "3.12"]
        poetry-version: ["1.8.2"]
        poetry-options: ["--with dev"]
        include:
          # Adds one additional matrix configuration that runs the unit tests
          # against a minimal installation of pixeltable (without --with dev).
          - os: ubuntu-22.04
            python-version: "3.9"
            poetry-version: "1.8.2"
            poetry-options: ""
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}  # Needed for conda to work
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Delete unnecessary files
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /opt/hostedtoolcache
          df -h
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: latest
          activate-environment: pxt
          python-version: ${{ matrix.python-version }}
          use-only-tar-bz2: true  # Needed to use conda with cache action
      - name: Show conda info
        run: conda info
      - name: Install poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==${{ matrix.poetry-version }}
      - name: Define a venv cache
        uses: actions/cache@v4
        with:
          # The cache is keyed to the following:
          # - Matrix parameters
          # - poetry.lock and related .toml files and Makefile (so that if the
          #   dependencies or poetry config change, the cache will be invalidated)
          path: ${{ env.CONDA }}/envs
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.poetry-version }}-${{
            matrix.poetry-options }}-${{ hashFiles('poetry.lock', 'poetry.toml', 'pyproject.toml', 'Makefile') }}
      - name: Install the project dependencies
        # setuptools >= 69.2 has been causing problems with github actions even when its
        # version is enforced in poetry. For now, explicitly install setuptools 69.1.1 first.
        run: |
          python -m pip install setuptools==69.1.1
          poetry install ${{ matrix.poetry-options }}
      - name: Install yolox
        # Yolox cannot be installed with poetry and only seems to work with python <= 3.10
        if: ${{ matrix.poetry-options != '' && matrix.python-version == '3.9' }}
        run: python -m pip install git+https://github.com/Megvii-BaseDetection/YOLOX@ac58e0a
      - name: Ensure pytest is installed
        # This is necessary for running the tests without --with dev
        if: ${{ matrix.poetry-options == '' }}
        run: pip install pytest coverage
      - name: Run the unit tests
        run: coverage run -m --source=pixeltable pytest -v -m ''
      - name: Run documentation notebooks
        if: ${{ matrix.poetry-options != '' }}
        continue-on-error: true  # For now, continue even if the notebooks fail
        env:
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -x  # print commands for debugging
          if [[ "$GITHUB_REF" == "refs/pull/"* ]]; then
              # This is a PR. Only run notebooks without getpass
              NOTEBOOKS=$(grep -L "getpass"  docs/release/**/*ipynb)
          else
              NOTEBOOKS=$(ls docs/release/**/*ipynb)
          fi
          pytest --overwrite --nbmake --nbmake-timeout=3600 $NOTEBOOKS
      - name: Generate code coverage report
        run: coverage report -m
      - name: Print utilization info
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          df -h
          du -h -d3 /home/runner
          du -h -d3 /home/runner/.cache
      - name: Print utilization info
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: df -h
