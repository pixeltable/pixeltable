name: tests

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]
  schedule:
    - cron: "24 1 * * 2"  # Tuesday at 01:24 UTC
  workflow_dispatch:
    inputs:
      enable_tmate:
        type: boolean
        description: 'Enable SSH debugging with tmate'
        required: false
        default: false
      run_on_all_platforms:
        type: boolean
        description: 'Run on all platforms (including expensive ones)'
        required: false
        default: false

env:
  POETRY_VERSION: 1.8.2
  # The llama-cpp-python build fails in CI with LLaVA support enabled. If we ever want to test specific LLaVA
  # functionality in CI, we'll need to investigate further (it's likely due to a missing compiler dependency).
  # We also disable Metal (GPU) support on MacOS, which doesn't seem to work properly in CI.
  CMAKE_ARGS: '-DLLAVA_BUILD=OFF -DGGML_METAL=OFF'
  # API keys for various services. In a PR, these secrets will be empty.
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        # Test with Python 3.9 and 3.12 (minimum and maximum supported versions) on every platform.
        # In most cases, test only the basic (free) platforms: ubuntu-22.04, macos-13, windows-2022.
        # On a scheduled run, also test ubuntu-arm64 and ubuntu-x64-t4 (which cost money).
        # A workflow_dispatch trigger can (optionally) also be used to trigger a full run on all platforms.
        os: ${{ (github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && inputs.run_on_all_platforms))
                && fromJSON('["ubuntu-22.04", "macos-13", "windows-2022", "ubuntu-arm64", "ubuntu-x64-t4"]')
                || fromJSON('["ubuntu-22.04", "macos-13", "windows-2022"]') }}
        python-version: ["3.9", "3.12"]
        test-category: ["py"]
        poetry-options: ["--with dev"]
        # Add some additional matrix configurations that are run only on linux, to test
        # additional scenarios/compatibilities that are unlikely to be platform-sensitive.
        include:
          # Python 3.10
          - os: ubuntu-22.04
            python-version: "3.10"
            test-category: "py"
            poetry-options: "--with dev"
          # Python 3.11
          - os: ubuntu-22.04
            python-version: "3.11"
            test-category: "py"
            poetry-options: "--with dev"
          # Minimal installation of pixeltable (without --with dev)
          - os: ubuntu-22.04
            python-version: "3.9"
            test-category: "py"
            poetry-options: ""
          # Python 3.13 (minimal installation, without --with dev)
          - os: ubuntu-22.04
            python-version: "3.13"
            test-category: "py"
            poetry-options: ""
          # Notebook tests
          - os: ubuntu-22.04
            python-version: "3.9"
            test-category: "ipynb"
            poetry-options: "--with dev"
          # Linting, type-checking, docstrings validation, etc.
          - os: ubuntu-22.04
            python-version: "3.9"
            test-category: "lint"
            poetry-options: "--with dev"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}  # Needed for conda to work
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Set up tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.enable_tmate }}
        uses: mxschmitt/action-tmate@v3
      - name: Delete unnecessary files
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /opt/hostedtoolcache
          df -h
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: latest
          activate-environment: pxt
          python-version: ${{ matrix.python-version }}
          use-only-tar-bz2: true  # Needed to use conda with cache action
      - name: Show conda info
        run: conda info
      - name: Install ffmpeg
        # Needed for WhisperX
        if: ${{ matrix.poetry-options != '' }}
        run: conda install -c conda-forge libiconv ffmpeg
      - name: Install ollama
        if: ${{ matrix.poetry-options != '' && matrix.os == 'ubuntu-22.04' }}
        run: |
          curl -fsSL https://raw.githubusercontent.com/ollama/ollama/4759d879f2376ffb9b82f296e442ec8ef137f27b/scripts/install.sh | sh
          sleep 10  # Wait for the ollama server to start
          # Pull the model used for testing now, with retries, to safeguard against connection issues
          ./scripts/retry.sh 3 30 ollama pull 'qwen2.5:0.5b'
      - name: Install poetry
        # setuptools >= 69.2 has been causing problems with github actions even when its
        # version is enforced in poetry. For now, explicitly revert to setuptools 69.1.1
        # prior to installing project dependencies.
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry==$POETRY_VERSION
          python -m pip install setuptools==69.1.1
      - name: Define a venv cache
        uses: actions/cache@v4
        if: false
        with:
          # The cache is keyed to the following:
          # - Matrix parameters
          # - poetry.lock and related .toml files and Makefile (so that if the
          #   dependencies or poetry config change, the cache will be invalidated)
          path: ${{ env.CONDA }}/envs
          key: venv-${{ matrix.os }}-${{ matrix.python-version }}-${{ matrix.poetry-options }}-${{
            hashFiles('.github/workflows/pytest.yml', 'poetry.lock', 'poetry.toml', 'pyproject.toml', 'Makefile') }}
      - name: Install the project dependencies
        # Retry 3 times to be resilient against transient connectivity issues.
        run: ./scripts/retry.sh 3 60 poetry install ${{ matrix.poetry-options }}
      - name: Install YOLOX
        # Yolox cannot be installed with poetry and only seems to work with python <= 3.10 and not on ubuntu-arm64
        if: ${{ matrix.poetry-options != '' && matrix.python-version == '3.9' && matrix.os == 'ubuntu-22.04' }}
        run: python -m pip install git+https://github.com/Megvii-BaseDetection/YOLOX@ac58e0a protobuf==5.27.0
      - name: Install WhisperX
        if: ${{ matrix.poetry-options != '' && matrix.python-version != '3.13' && matrix.os != 'ubuntu-x64-t4' }}
        run: python -m pip install git+https://github.com/m-bain/whisperX.git@f2da2f8 typer==0.9.0
      - name: Ensure pytest is installed
        # This is necessary for running the tests without --with dev
        if: ${{ matrix.poetry-options == '' }}
        run: pip install pytest pytest-xdist pytest-rerunfailures coverage
      - name: Run the unit tests
        if: ${{ matrix.test-category == 'py' }}
        # Run the tests with the 'expensive' marker only once, on ubuntu-22.04 with Python 3.9. The other tests
        # (including tests with the 'remote_api' marker that are not also marked 'expensive') will run on all matrix
        # configurations.
        run: |
          PYTEST_MARKERS="${{ (matrix.os != 'ubuntu-22.04' || matrix.python-version != '3.9') && 'not expensive' || '' }}"
          echo "Running tests with markers: $PYTEST_MARKERS"
          coverage run -m --source=pixeltable pytest -v -m "$PYTEST_MARKERS" --strict-markers
          coverage report -m
      - name: Run the notebook tests
        if: ${{ matrix.test-category == 'ipynb' }}
        run: |
          ./scripts/prepare-nb-tests.sh --no-pip docs/notebooks tests
          pytest -v -m '' --nbmake --nbmake-timeout=1800 target/nb-tests/*.ipynb
      - name: Type check
        if: ${{ matrix.test-category == 'lint' }}
        run: mypy pixeltable
      - name: Validate docstrings
        if: ${{ matrix.test-category == 'lint' }}
        run: mkdocs build --strict
      - name: Validate links in notebooks
        if: ${{ matrix.test-category == 'lint' }}
        run: ./scripts/lint-notebooks.sh
      - name: Print utilization info
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          df -h
          du -h -d3 /home/runner
          du -h -d3 /home/runner/.cache
      - name: Print utilization info
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: df -h
