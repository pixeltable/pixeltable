name: Nightly CI

on:
  schedule:
    - cron: "19 2 * * 1,3,5"  # Monday, Wednesday, Friday at 02:19 UTC
  workflow_dispatch:

env:
  # in a PR, the secrets will be empty
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
  OPENCV_VIDEOIO_DEBUG: 1

jobs:
  pytest:
    strategy:
      fail-fast: false
      matrix:
        # Test the earliest and latest supported Python versions on every supported platform.
        os: [ubuntu-22.04]
        python-version: ["3.9", "3.12"]
        package-configs:
          - ""
          - "torch torchvision transformers sentence-transformers pyarrow"
          - "openai together fireworks-ai"
          - "datasets boto3 openpyxl tiktoken pymupdf mistune spacy https://github.com/explosion/spacy-models/releases/download/en_core_web_sm-3.7.1/en_core_web_sm-3.7.1-py3-none-any.whl"
          - "label_studio_sdk"
        include:
          - os: macos-12
            python-version: "3.9"
            package-configs: ""
          - os: windows-2022
            python-version: "3.9"
            package-configs: ""

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}  # Needed for conda to work
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Delete unnecessary files
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /opt/hostedtoolcache
          df -h
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: latest
          activate-environment: pxt
          python-version: ${{ matrix.python-version }}
          use-only-tar-bz2: true  # Needed to use conda with cache action
      - name: Show conda info
        run: conda info
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pixeltable ${{ matrix.package-configs }}
          python -m pip install pytest
      - name: Run the unit tests
        run: |
          pytest -v -m '' tests
      - name: Print utilization info
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          df -h
          du -h -d3 /home/runner
          du -h -d3 /home/runner/.cache
      - name: Print utilization info
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: df -h
