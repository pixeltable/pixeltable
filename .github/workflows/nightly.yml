name: nightly

on:
  schedule:
    - cron: "19 2 * * 1,3,5"  # Monday, Wednesday, Friday at 02:19 UTC
  workflow_dispatch:
    inputs:
      enable_tmate:
        type: boolean
        description: 'Enable SSH debugging with tmate'
        required: false
        default: false

env:
  PXTTEST_IN_CI: 1
  PIXELTABLE_ENABLE_MPS: false  # Disable MPS on MacOS runners until/unless we find a way to cope with memory limits
  CMAKE_ARGS: '-DLLAVA_BUILD=OFF -DGGML_METAL=OFF'
  # in a PR, the secrets will be empty
  ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: us-west-2
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AZURE_OPENAI_API_KEY: ${{ secrets.AZURE_OPENAI_API_KEY }}
  DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}
  FIREWORKS_API_KEY: ${{ secrets.FIREWORKS_API_KEY }}
  GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
  GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
  MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
  TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}

jobs:
  tests:
    strategy:
      fail-fast: false
      matrix:
        # Test with a variety of different packages on ubuntu, with the minimum and maximum supported Python versions.
        os: [ubuntu-22.04]
        python-version: ["3.10", "3.13"]
        package-configs:
          - ""
          - "pyarrow sentence-transformers sentencepiece soundfile torch torchaudio torchvision transformers"
          - "anthropic fireworks-ai google-genai groq mistralai openai replicate together"
          - "huggingface-hub llama-cpp-python openai-whisper"
          - "datasets boto3 openpyxl tiktoken pymupdf mistune spacy"
          - "label_studio_sdk"
          - "pixeltable-yolox"
        include:
          # Test the basic pixeltable installation on other platforms.
          - os: macos-15
            python-version: "3.10"
            package-configs: ""
          - os: windows-2022
            python-version: "3.10"
            package-configs: ""
          - os: ubuntu-arm64
            python-version: "3.10"
            package-configs: ""
          - os: ubuntu-x64-t4
            python-version: "3.10"
            package-configs: ""
          # WhisperX doesn't install on 3.13; run on 3.10 only
          - os: ubuntu-22.04
            python-version: "3.10"
            package-configs: "whisperx"

    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}  # Needed for conda to work
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: release
      - name: Set up tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.enable_tmate }}
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
      - name: Delete unnecessary files
        if: ${{ !startsWith(matrix.os, 'windows') }}
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /opt/hostedtoolcache
          df -h
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: latest
          activate-environment: pxt
          use-only-tar-bz2: true  # Needed to use conda with cache action
      - name: Install python
        run: |
          conda install -y python=${{ matrix.python-version }} pip=25.0
          conda info
      - name: Install ffmpeg
        # libiconv and ffmpeg are needed by whisper.
        if: ${{ contains(matrix.package-configs, 'whisper') }}
        run: ./scripts/retry.sh 3 30 conda install -c conda-forge libiconv ffmpeg
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install pixeltable ${{ matrix.package-configs }}
          python -m pip install filelock pytest pytest-xdist pytest-rerunfailures
      - name: Run the unit tests
        env:
          PXTTEST_CI_OS: ${{ matrix.os }}
        run: pytest -v -m '' tests
      - name: Print utilization info
        if: ${{ startsWith(matrix.os, 'ubuntu') }}
        run: |
          df -h
          du -h -d3 /home/runner
          du -h -d3 /home/runner/.cache
      - name: Print utilization info
        if: ${{ !startsWith(matrix.os, 'ubuntu') }}
        run: df -h

  isolated-nb-tests:
    # Runs a script that tests each notebook in a fresh conda environment with a clean Pixeltable DB,
    # to ensure the notebook is capturing dependencies correctly and that the dependencies still work.
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        python-version: ["3.10", "3.12"]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        shell: bash -el {0}  # Needed for conda to work
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          ref: release
      - name: Set up tmate session
        if: ${{ github.event_name == 'workflow_dispatch' && inputs.enable_tmate }}
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true
      - name: Delete unnecessary files
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          sudo rm -rf /opt/hostedtoolcache
          df -h
      - name: Install ollama
        run: |
          curl -fsSL https://ollama.com/install.sh | sh
          sleep 10  # Wait for the ollama server to start
          # Pull the model used for testing now, with retries, to safeguard against connection issues
          ./scripts/retry.sh 3 30 ollama pull 'qwen2.5:0.5b'
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v3
        with:
          miniconda-version: latest
          use-only-tar-bz2: true  # Needed to use conda with cache action
      - name: Run isolated notebook tests
        run: ./scripts/run-isolated-nb-tests.sh ${{ matrix.python-version }}
      - name: Print debugging info
        if: ${{ always() }}
        run: |
          conda activate nb-test-env
          conda info
          pip list
