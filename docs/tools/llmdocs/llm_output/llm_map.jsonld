{
  "@context": "https://schema.org",
  "@type": "SoftwareSourceCode",
  "name": "Pixeltable SDK",
  "version": "main",
  "url": "https://docs.pixeltable.com/sdk/main",
  "programmingLanguage": "Python",
  "dateModified": "2025-09-28T18:13:49.567234",
  "hasPart": [
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable",
      "name": "pixeltable",
      "description": "Core Pixeltable API for table operations, data processing, and UDF management.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.create_table",
          "name": "pixeltable.create_table",
          "identifier": "create_table",
          "description": "Create a new base table. Exactly one of `schema` or `source` must be provided.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L47",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L47",
          "codeLocation": {
            "startLine": 47,
            "lineCount": 150,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": true,
                "type": "str"
              },
              {
                "name": "schema",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "source",
                "required": false,
                "type": "Optional[TableDataSource]",
                "default": "None"
              },
              {
                "name": "source_format",
                "required": false,
                "type": "Optional[Literal['csv', 'excel', 'parquet', 'json']]",
                "default": "None"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "on_error",
                "required": false,
                "type": "Literal['abort', 'ignore']",
                "default": "abort"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "int",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "str",
                "default": ""
              },
              {
                "name": "media_validation",
                "required": false,
                "type": "Literal['on_read', 'on_write']",
                "default": "on_write"
              },
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'ignore', 'replace', 'replace_force']",
                "default": "error"
              },
              {
                "name": "extra_args",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              }
            ],
            "formatted": "(\n    path: str,\n    schema: Optional[dict[str, Any]] = None,\n    source: Optional[TableDataSource] = None,\n    source_format: Optional[Literal['csv', 'excel', 'parquet', 'json']] = None,\n    schema_overrides: Optional[dict[str, Any]] = None,\n    on_error: Literal['abort', 'ignore'] = 'abort',\n    primary_key: str | list[str] | None = None,\n    num_retained_versions: int = 10,\n    comment: str = '',\n    media_validation: Literal['on_read', 'on_write'] = 'on_write',\n    if_exists: Literal['error', 'ignore', 'replace', 'replace_force'] = 'error',\n    extra_args: Optional[dict[str, Any]] = None\n)",
            "returns": "catalog.Table"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.create_table",
              "httpMethod": "GET"
            }
          },
          "category": "initialization",
          "usageFrequency": "high",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path",
              "valueType": "Any",
              "description": "Pixeltable path (qualified name) of the table, such as `'my_table'` or `'my_dir.my_subdir.my_table'`."
            },
            {
              "@type": "PropertyValue",
              "name": "schema",
              "valueType": "Any",
              "description": "Schema for the new table, mapping column names to Pixeltable types."
            },
            {
              "@type": "PropertyValue",
              "name": "source",
              "valueType": "Any",
              "description": "A data source (file, URL, DataFrame, or list of rows) to import from."
            },
            {
              "@type": "PropertyValue",
              "name": "source_format",
              "valueType": "Any",
              "description": "Must be used in conjunction with a `source`.\nIf specified, then the given format will be used to read the source data. (Otherwise,\nPixeltable will attempt to infer the format from the source data.)"
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "Must be used in conjunction with a `source`.\nIf specified, then columns in `schema_overrides` will be given the specified types.\n(Pixeltable will attempt to infer the types of any columns not specified.)"
            },
            {
              "@type": "PropertyValue",
              "name": "on_error",
              "valueType": "Any",
              "description": "Determines the behavior if an error occurs while evaluating a computed column or detecting an\ninvalid media file (such as a corrupt image) for one of the inserted rows.\n\n- If `on_error='abort'`, then an exception will be raised and the rows will not be inserted.\n- If `on_error='ignore'`, then execution will continue and the rows will be inserted. Any cells\n    with errors will have a `None` value for that cell, with information about the error stored in the\n    corresponding `tbl.col_name.errortype` and `tbl.col_name.errormsg` fields."
            },
            {
              "@type": "PropertyValue",
              "name": "primary_key",
              "valueType": "Any",
              "description": "An optional column name or list of column names to use as the primary key(s) of the\ntable."
            },
            {
              "@type": "PropertyValue",
              "name": "num_retained_versions",
              "valueType": "Any",
              "description": "Number of versions of the table to retain."
            },
            {
              "@type": "PropertyValue",
              "name": "comment",
              "valueType": "Any",
              "description": "An optional comment; its meaning is user-defined."
            },
            {
              "@type": "PropertyValue",
              "name": "media_validation",
              "valueType": "Any",
              "description": "Media validation policy for the table.\n- `'on_read'`: validate media files at query time\n- `'on_write'`: validate media files during insert/update operations"
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Determines the behavior if a table already exists at the specified path location.\n- `'error'`: raise an error\n- `'ignore'`: do nothing and return the existing table handle\n- `'replace'`: if the existing table has no views or snapshots, drop and replace it with a new one;\n    raise an error if the existing table has views or snapshots\n- `'replace_force'`: drop the existing table and all its views and snapshots, and create a new one"
            },
            {
              "@type": "PropertyValue",
              "name": "extra_args",
              "valueType": "Any",
              "description": "Must be used in conjunction with a `source`. If specified, then additional arguments will be\npassed along to the source data provider."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created table, or to an already existing table at the path when `if_exists='ignore'`.\nPlease note the schema of the existing table may not match the schema provided in the call."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.create_view",
          "name": "pixeltable.create_view",
          "identifier": "create_view",
          "description": "Create a view of an existing table object (which itself can be a view or a snapshot or a base table).",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L199",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L199",
          "codeLocation": {
            "startLine": 199,
            "lineCount": 118,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": true,
                "type": "str"
              },
              {
                "name": "base",
                "required": true,
                "type": "catalog.Table | DataFrame"
              },
              {
                "name": "additional_columns",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "is_snapshot",
                "required": false,
                "type": "bool",
                "default": "False"
              },
              {
                "name": "iterator",
                "required": false,
                "type": "Optional[tuple[type[ComponentIterator], dict[str, Any]]]",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "int",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "str",
                "default": ""
              },
              {
                "name": "media_validation",
                "required": false,
                "type": "Literal['on_read', 'on_write']",
                "default": "on_write"
              },
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'ignore', 'replace', 'replace_force']",
                "default": "error"
              }
            ],
            "formatted": "(\n    path: str,\n    base: catalog.Table | DataFrame,\n    additional_columns: Optional[dict[str, Any]] = None,\n    is_snapshot: bool = False,\n    iterator: Optional[tuple[type[ComponentIterator], dict[str, Any]]] = None,\n    num_retained_versions: int = 10,\n    comment: str = '',\n    media_validation: Literal['on_read', 'on_write'] = 'on_write',\n    if_exists: Literal['error', 'ignore', 'replace', 'replace_force'] = 'error'\n)",
            "returns": "Optional[catalog.Table]"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.create_view",
              "httpMethod": "GET"
            }
          },
          "category": "initialization",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path",
              "valueType": "Any",
              "description": "A name for the view; can be either a simple name such as `my_view`, or a pathname such as\n`dir1.my_view`."
            },
            {
              "@type": "PropertyValue",
              "name": "base",
              "valueType": "Any",
              "description": "[`Table`][pixeltable.Table] (i.e., table or view or snapshot) or [`DataFrame`][pixeltable.DataFrame] to\nbase the view on."
            },
            {
              "@type": "PropertyValue",
              "name": "additional_columns",
              "valueType": "Any",
              "description": "If specified, will add these columns to the view once it is created. The format\nof the `additional_columns` parameter is identical to the format of the `schema_or_df` parameter in\n[`create_table`][pixeltable.create_table]."
            },
            {
              "@type": "PropertyValue",
              "name": "is_snapshot",
              "valueType": "Any",
              "description": "Whether the view is a snapshot. Setting this to `True` is equivalent to calling\n[`create_snapshot`][pixeltable.create_snapshot]."
            },
            {
              "@type": "PropertyValue",
              "name": "iterator",
              "valueType": "Any",
              "description": "The iterator to use for this view. If specified, then this view will be a one-to-many view of\nthe base table."
            },
            {
              "@type": "PropertyValue",
              "name": "num_retained_versions",
              "valueType": "Any",
              "description": "Number of versions of the view to retain."
            },
            {
              "@type": "PropertyValue",
              "name": "comment",
              "valueType": "Any",
              "description": "Optional comment for the view."
            },
            {
              "@type": "PropertyValue",
              "name": "media_validation",
              "valueType": "Any",
              "description": "Media validation policy for the view.\n- `'on_read'`: validate media files at query time\n- `'on_write'`: validate media files during insert/update operations"
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Directive regarding how to handle if the path already exists.\nMust be one of the following:\n\n- `'error'`: raise an error\n- `'ignore'`: do nothing and return the existing view handle\n- `'replace'`: if the existing view has no dependents, drop and replace it with a new one\n- `'replace_force'`: drop the existing view and all its dependents, and create a new one"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the [`Table`][pixeltable.Table] representing the newly created view. If the path already\nexists and `if_exists='ignore'`, returns a handle to the existing view. Please note the schema\nor the base of the existing view may not match those provided in the call."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.create_snapshot",
          "name": "pixeltable.create_snapshot",
          "identifier": "create_snapshot",
          "description": "Create a snapshot of an existing table object (which itself can be a view or a snapshot or a base table).",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L319",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L319",
          "codeLocation": {
            "startLine": 319,
            "lineCount": 79,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path_str",
                "required": true,
                "type": "str"
              },
              {
                "name": "base",
                "required": true,
                "type": "catalog.Table | DataFrame"
              },
              {
                "name": "additional_columns",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "iterator",
                "required": false,
                "type": "Optional[tuple[type[ComponentIterator], dict[str, Any]]]",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "int",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "str",
                "default": ""
              },
              {
                "name": "media_validation",
                "required": false,
                "type": "Literal['on_read', 'on_write']",
                "default": "on_write"
              },
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'ignore', 'replace', 'replace_force']",
                "default": "error"
              }
            ],
            "formatted": "(\n    path_str: str,\n    base: catalog.Table | DataFrame,\n    additional_columns: Optional[dict[str, Any]] = None,\n    iterator: Optional[tuple[type[ComponentIterator], dict[str, Any]]] = None,\n    num_retained_versions: int = 10,\n    comment: str = '',\n    media_validation: Literal['on_read', 'on_write'] = 'on_write',\n    if_exists: Literal['error', 'ignore', 'replace', 'replace_force'] = 'error'\n)",
            "returns": "Optional[catalog.Table]"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.create_snapshot",
              "httpMethod": "GET"
            }
          },
          "category": "initialization",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path_str",
              "valueType": "Any",
              "description": "A name for the snapshot; can be either a simple name such as `my_snapshot`, or a pathname such as\n`dir1.my_snapshot`."
            },
            {
              "@type": "PropertyValue",
              "name": "base",
              "valueType": "Any",
              "description": "[`Table`][pixeltable.Table] (i.e., table or view or snapshot) or [`DataFrame`][pixeltable.DataFrame] to\nbase the snapshot on."
            },
            {
              "@type": "PropertyValue",
              "name": "additional_columns",
              "valueType": "Any",
              "description": "If specified, will add these columns to the snapshot once it is created. The format\nof the `additional_columns` parameter is identical to the format of the `schema_or_df` parameter in\n[`create_table`][pixeltable.create_table]."
            },
            {
              "@type": "PropertyValue",
              "name": "iterator",
              "valueType": "Any",
              "description": "The iterator to use for this snapshot. If specified, then this snapshot will be a one-to-many view of\nthe base table."
            },
            {
              "@type": "PropertyValue",
              "name": "num_retained_versions",
              "valueType": "Any",
              "description": "Number of versions of the view to retain."
            },
            {
              "@type": "PropertyValue",
              "name": "comment",
              "valueType": "Any",
              "description": "Optional comment for the snapshot."
            },
            {
              "@type": "PropertyValue",
              "name": "media_validation",
              "valueType": "Any",
              "description": "Media validation policy for the snapshot.\n- `'on_read'`: validate media files at query time\n- `'on_write'`: validate media files during insert/update operations"
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Directive regarding how to handle if the path already exists.\nMust be one of the following:\n\n- `'error'`: raise an error\n- `'ignore'`: do nothing and return the existing snapshot handle\n- `'replace'`: if the existing snapshot has no dependents, drop and replace it with a new one\n- `'replace_force'`: drop the existing snapshot and all its dependents, and create a new one"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the [`Table`][pixeltable.Table] representing the newly created snapshot.\nPlease note the schema or base of the existing snapshot may not match those provided in the call."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.drop_table",
          "name": "pixeltable.drop_table",
          "identifier": "drop_table",
          "description": "Drop a table, view, or snapshot.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L498",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L498",
          "codeLocation": {
            "startLine": 498,
            "lineCount": 54,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "table",
                "required": true,
                "type": "str | catalog.Table"
              },
              {
                "name": "force",
                "required": false,
                "type": "bool",
                "default": "False"
              },
              {
                "name": "if_not_exists",
                "required": false,
                "type": "Literal['error', 'ignore']",
                "default": "error"
              }
            ],
            "formatted": "(\n    table: str | catalog.Table,\n    force: bool = False,\n    if_not_exists: Literal['error', 'ignore'] = 'error'\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.drop_table",
              "httpMethod": "GET"
            }
          },
          "category": "deletion",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "table",
              "valueType": "Any",
              "description": "Fully qualified name, or handle, of the table to be dropped."
            },
            {
              "@type": "PropertyValue",
              "name": "force",
              "valueType": "Any",
              "description": "If `True`, will also drop all views and sub-views of this table."
            },
            {
              "@type": "PropertyValue",
              "name": "if_not_exists",
              "valueType": "Any",
              "description": "Directive regarding how to handle if the path does not exist.\nMust be one of the following:\n\n- `'error'`: raise an error\n- `'ignore'`: do nothing and return"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.get_table",
          "name": "pixeltable.get_table",
          "identifier": "get_table",
          "description": "Get a handle to an existing table, view, or snapshot.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L436",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L436",
          "codeLocation": {
            "startLine": 436,
            "lineCount": 32,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": true,
                "type": "str"
              }
            ],
            "formatted": "(\n    path: str\n)",
            "returns": "catalog.Table"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.get_table",
              "httpMethod": "GET"
            }
          },
          "category": "retrieval",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path",
              "valueType": "Any",
              "description": "Path to the table."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the [`Table`][pixeltable.Table]."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.create_dir",
          "name": "pixeltable.create_dir",
          "identifier": "create_dir",
          "description": "Create a directory.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L637",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L637",
          "codeLocation": {
            "startLine": 637,
            "lineCount": 50,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": true,
                "type": "str"
              },
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'ignore', 'replace', 'replace_force']",
                "default": "error"
              },
              {
                "name": "parents",
                "required": false,
                "type": "bool",
                "default": "False"
              }
            ],
            "formatted": "(\n    path: str,\n    if_exists: Literal['error', 'ignore', 'replace', 'replace_force'] = 'error',\n    parents: bool = False\n)",
            "returns": "Optional[catalog.Dir]"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.create_dir",
              "httpMethod": "GET"
            }
          },
          "category": "initialization",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path",
              "valueType": "Any",
              "description": "Path to the directory."
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Directive regarding how to handle if the path already exists.\nMust be one of the following:\n\n- `'error'`: raise an error\n- `'ignore'`: do nothing and return the existing directory handle\n- `'replace'`: if the existing directory is empty, drop it and create a new one\n- `'replace_force'`: drop the existing directory and all its children, and create a new one"
            },
            {
              "@type": "PropertyValue",
              "name": "parents",
              "valueType": "Any",
              "description": "Create missing parent directories."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created directory, or to an already existing directory at the path when\n`if_exists='ignore'`. Please note the existing directory may not be empty."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.drop_dir",
          "name": "pixeltable.drop_dir",
          "identifier": "drop_dir",
          "description": "Remove a directory.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L689",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L689",
          "codeLocation": {
            "startLine": 689,
            "lineCount": 40,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": true,
                "type": "str"
              },
              {
                "name": "force",
                "required": false,
                "type": "bool",
                "default": "False"
              },
              {
                "name": "if_not_exists",
                "required": false,
                "type": "Literal['error', 'ignore']",
                "default": "error"
              }
            ],
            "formatted": "(\n    path: str,\n    force: bool = False,\n    if_not_exists: Literal['error', 'ignore'] = 'error'\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.drop_dir",
              "httpMethod": "GET"
            }
          },
          "category": "deletion",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path",
              "valueType": "Any",
              "description": "Name or path of the directory."
            },
            {
              "@type": "PropertyValue",
              "name": "force",
              "valueType": "Any",
              "description": "If `True`, will also drop all tables and subdirectories of this directory, recursively, along\nwith any views or snapshots that depend on any of the dropped tables."
            },
            {
              "@type": "PropertyValue",
              "name": "if_not_exists",
              "valueType": "Any",
              "description": "Directive regarding how to handle if the path does not exist.\nMust be one of the following:\n\n- `'error'`: raise an error\n- `'ignore'`: do nothing and return"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.get_dir_contents",
          "name": "pixeltable.get_dir_contents",
          "identifier": "get_dir_contents",
          "description": "Get the contents of a Pixeltable directory.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L554",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L554",
          "codeLocation": {
            "startLine": 554,
            "lineCount": 32,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "dir_path",
                "required": false,
                "type": "str",
                "default": ""
              },
              {
                "name": "recursive",
                "required": false,
                "type": "bool",
                "default": "True"
              }
            ],
            "formatted": "(\n    dir_path: str = '',\n    recursive: bool = True\n)",
            "returns": "'DirContents'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.get_dir_contents",
              "httpMethod": "GET"
            }
          },
          "category": "retrieval",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "dir_path",
              "valueType": "Any",
              "description": "Path to the directory. Defaults to the root directory."
            },
            {
              "@type": "PropertyValue",
              "name": "recursive",
              "valueType": "Any",
              "description": "If `False`, returns only those tables and directories that are directly contained in specified\ndirectory; if `True`, returns all tables and directories that are descendants of the specified directory,\nrecursively."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A [`DirContents`][pixeltable.DirContents] object representing the contents of the specified directory."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.ls",
          "name": "pixeltable.ls",
          "identifier": "ls",
          "description": "List the contents of a Pixeltable directory.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L731",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L731",
          "codeLocation": {
            "startLine": 731,
            "lineCount": 60,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": false,
                "type": "str",
                "default": ""
              }
            ],
            "formatted": "(\n    path: str = ''\n)",
            "returns": "pd.DataFrame"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.ls",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.move",
          "name": "pixeltable.move",
          "identifier": "move",
          "description": "Move a schema object to a new directory and/or rename a schema object.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L470",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L470",
          "codeLocation": {
            "startLine": 470,
            "lineCount": 26,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "path",
                "required": true,
                "type": "str"
              },
              {
                "name": "new_path",
                "required": true,
                "type": "str"
              }
            ],
            "formatted": "(\n    path: str,\n    new_path: str\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.move",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "path",
              "valueType": "Any",
              "description": "absolute path to the existing schema object."
            },
            {
              "@type": "PropertyValue",
              "name": "new_path",
              "valueType": "Any",
              "description": "absolute new path for the schema object."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.configure_logging",
          "name": "pixeltable.configure_logging",
          "identifier": "configure_logging",
          "description": "Configure logging.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L926",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L926",
          "codeLocation": {
            "startLine": 926,
            "lineCount": 16,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "to_stdout",
                "required": false,
                "type": "Optional[bool]",
                "default": "None"
              },
              {
                "name": "level",
                "required": false,
                "type": "Optional[int]",
                "default": "None"
              },
              {
                "name": "add",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "remove",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              }
            ],
            "formatted": "(\n    to_stdout: Optional[bool] = None,\n    level: Optional[int] = None,\n    add: Optional[str] = None,\n    remove: Optional[str] = None\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.configure_logging",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "to_stdout",
              "valueType": "Any",
              "description": "if True, also log to stdout"
            },
            {
              "@type": "PropertyValue",
              "name": "level",
              "valueType": "Any",
              "description": "default log level"
            },
            {
              "@type": "PropertyValue",
              "name": "add",
              "valueType": "Any",
              "description": "comma-separated list of 'module name:log level' pairs; ex.: add='video:10'"
            },
            {
              "@type": "PropertyValue",
              "name": "remove",
              "valueType": "Any",
              "description": "comma-separated list of module names"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.init",
          "name": "pixeltable.init",
          "identifier": "init",
          "description": "Initializes the Pixeltable environment.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L39",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L39",
          "codeLocation": {
            "startLine": 39,
            "lineCount": 6,
            "relativePath": "pixeltable/pixeltable/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "config_overrides",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              }
            ],
            "formatted": "(\n    config_overrides: Optional[dict[str, Any]] = None\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.init",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.udf",
          "name": "pixeltable.udf",
          "identifier": "udf",
          "description": "A decorator to create a Function from a function definition.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/func/udf.py#L46",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/func/udf.py#L46",
          "codeLocation": {
            "startLine": 46,
            "lineCount": 49,
            "relativePath": "pixeltable/pixeltable/func/udf.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true
              },
              {
                "name": "kwargs",
                "required": true
              }
            ],
            "formatted": "(\n    args,\n    kwargs\n)"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.udf",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.query",
          "name": "pixeltable.query",
          "identifier": "query",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/func/query_template_function.py#L106",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/func/query_template_function.py#L106",
          "codeLocation": {
            "startLine": 106,
            "lineCount": 20,
            "relativePath": "pixeltable/pixeltable/func/query_template_function.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "Any"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.query",
              "httpMethod": "GET"
            }
          },
          "category": "query"
        }
      ]
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.Table",
      "name": "Table",
      "description": "A handle to a table, view, or snapshot. This class is the primary interface through which table operations",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/Table",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [
        {
          "@type": "Method",
          "@id": "pxt:Table.add_column",
          "name": "add_column",
          "description": "Adds an ordinary (non-computed) column to the table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L556",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L556",
            "line": 556,
            "lineCount": 46,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'ignore', 'replace', 'replace_force']",
                "default": "error"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "ts.ColumnType | builtins.type | _GenericAlias | exprs.Expr"
              }
            ],
            "formatted": "(\n    if_exists: Literal['error', 'ignore', 'replace', 'replace_force'] = 'error',\n    kwargs: ts.ColumnType | builtins.type | _GenericAlias | exprs.Expr\n)",
            "returns": "UpdateStatus"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Exactly one keyword argument of the form `col_name=col_type`."
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Determines the behavior if the column already exists. Must be one of the following:\n- `'error'`: an exception will be raised.\n- `'ignore'`: do nothing and return.\n- `'replace' or 'replace_force'`: drop the existing column and add the new column, if it has\n    no dependents."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.drop_column",
          "name": "drop_column",
          "description": "Drop a column from the table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L820",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L820",
            "line": 820,
            "lineCount": 114,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "column",
                "required": true,
                "type": "str | ColumnRef"
              },
              {
                "name": "if_not_exists",
                "required": false,
                "type": "Literal['error', 'ignore']",
                "default": "error"
              }
            ],
            "formatted": "(\n    column: str | ColumnRef,\n    if_not_exists: Literal['error', 'ignore'] = 'error'\n)",
            "returns": "None"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "column",
              "valueType": "Any",
              "description": "The name or reference of the column to drop."
            },
            {
              "@type": "PropertyValue",
              "name": "if_not_exists",
              "valueType": "Any",
              "description": "Directive for handling a non-existent column. Must be one of the following:\n- `'error'`: raise an error if the column does not exist.\n- `'ignore'`: do nothing if the column does not exist."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.rename_column",
          "name": "rename_column",
          "description": "Rename a column.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L935",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L935",
            "line": 935,
            "lineCount": 20,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "old_name",
                "required": true,
                "type": "str"
              },
              {
                "name": "new_name",
                "required": true,
                "type": "str"
              }
            ],
            "formatted": "(\n    old_name: str,\n    new_name: str\n)",
            "returns": "None"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "old_name",
              "valueType": "Any",
              "description": "The current name of the column."
            },
            {
              "@type": "PropertyValue",
              "name": "new_name",
              "valueType": "Any",
              "description": "The new name of the column."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.recompute_columns",
          "name": "recompute_columns",
          "description": "Recompute the values in one or more computed columns of this table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1504",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1504",
            "line": 1504,
            "lineCount": 75,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "columns",
                "required": true,
                "type": "str | ColumnRef"
              },
              {
                "name": "where",
                "required": false,
                "type": "'exprs.Expr' | None",
                "default": "None"
              },
              {
                "name": "errors_only",
                "required": false,
                "type": "bool",
                "default": "False"
              },
              {
                "name": "cascade",
                "required": false,
                "type": "bool",
                "default": "True"
              }
            ],
            "formatted": "(\n    columns: str | ColumnRef,\n    where: 'exprs.Expr' | None = None,\n    errors_only: bool = False,\n    cascade: bool = True\n)",
            "returns": "UpdateStatus"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "columns",
              "valueType": "Any",
              "description": "The names or references of the computed columns to recompute."
            },
            {
              "@type": "PropertyValue",
              "name": "where",
              "valueType": "Any",
              "description": "A predicate to filter rows to recompute."
            },
            {
              "@type": "PropertyValue",
              "name": "errors_only",
              "valueType": "Any",
              "description": "If True, only run the recomputation for rows that have errors in the column (ie, the column's\n`errortype` property indicates that an error occurred). Only allowed for recomputing a single column."
            },
            {
              "@type": "PropertyValue",
              "name": "cascade",
              "valueType": "Any",
              "description": "if True, also update all computed columns that transitively depend on the recomputed columns."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.insert",
          "name": "insert",
          "description": "Inserts rows into this table. There are two mutually exclusive call patterns:",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1306",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1306",
            "line": 1306,
            "lineCount": 88,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "source",
                "required": false,
                "type": "Optional[TableDataSource]",
                "default": "None"
              },
              {
                "name": "source_format",
                "required": false,
                "type": "Optional[Literal['csv', 'excel', 'parquet', 'json']]",
                "default": "None"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "Optional[dict[str, ts.ColumnType]]",
                "default": "None"
              },
              {
                "name": "on_error",
                "required": false,
                "type": "Literal['abort', 'ignore']",
                "default": "abort"
              },
              {
                "name": "print_stats",
                "required": false,
                "type": "bool",
                "default": "False"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    source: Optional[TableDataSource] = None,\n    source_format: Optional[Literal['csv', 'excel', 'parquet', 'json']] = None,\n    schema_overrides: Optional[dict[str, ts.ColumnType]] = None,\n    on_error: Literal['abort', 'ignore'] = 'abort',\n    print_stats: bool = False,\n    kwargs: Any\n)",
            "returns": "UpdateStatus"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "source",
              "valueType": "Any",
              "description": "A data source from which data can be imported."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "(if inserting a single row) Keyword-argument pairs representing column names and values.\n(if inserting multiple rows) Additional keyword arguments are passed to the data source."
            },
            {
              "@type": "PropertyValue",
              "name": "source_format",
              "valueType": "Any",
              "description": "A hint about the format of the source data"
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "If specified, then columns in `schema_overrides` will be given the specified types"
            },
            {
              "@type": "PropertyValue",
              "name": "on_error",
              "valueType": "Any",
              "description": "Determines the behavior if an error occurs while evaluating a computed column or detecting an\ninvalid media file (such as a corrupt image) for one of the inserted rows.\n\n- If `on_error='abort'`, then an exception will be raised and the rows will not be inserted.\n- If `on_error='ignore'`, then execution will continue and the rows will be inserted. Any cells\n    with errors will have a `None` value for that cell, with information about the error stored in the\n    corresponding `tbl.col_name.errortype` and `tbl.col_name.errormsg` fields."
            },
            {
              "@type": "PropertyValue",
              "name": "print_stats",
              "valueType": "Any",
              "description": "If `True`, print statistics about the cost of computed columns."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.update",
          "name": "update",
          "description": "Update rows in this table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1395",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1395",
            "line": 1395,
            "lineCount": 37,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "value_spec",
                "required": true,
                "type": "dict[str, Any]"
              },
              {
                "name": "where",
                "required": false,
                "type": "Optional['exprs.Expr']",
                "default": "None"
              },
              {
                "name": "cascade",
                "required": false,
                "type": "bool",
                "default": "True"
              }
            ],
            "formatted": "(\n    value_spec: dict[str, Any],\n    where: Optional['exprs.Expr'] = None,\n    cascade: bool = True\n)",
            "returns": "UpdateStatus"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "value_spec",
              "valueType": "Any",
              "description": "a dictionary mapping column names to literal values or Pixeltable expressions."
            },
            {
              "@type": "PropertyValue",
              "name": "where",
              "valueType": "Any",
              "description": "a predicate to filter rows to update."
            },
            {
              "@type": "PropertyValue",
              "name": "cascade",
              "valueType": "Any",
              "description": "if True, also update all computed columns that transitively depend on the updated columns."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.delete",
          "name": "delete",
          "description": "Delete rows in this table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1580",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1580",
            "line": 1580,
            "lineCount": 16,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "where",
                "required": false,
                "type": "Optional['exprs.Expr']",
                "default": "None"
              }
            ],
            "formatted": "(\n    where: Optional['exprs.Expr'] = None\n)",
            "returns": "UpdateStatus"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "where",
              "valueType": "Any",
              "description": "a predicate to filter rows to delete."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.add_embedding_index",
          "name": "add_embedding_index",
          "description": "Add an embedding index to the table. Once the index is created, it will be automatically kept up-to-date as new",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L969",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L969",
            "line": 969,
            "lineCount": 125,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "column",
                "required": true,
                "type": "str | ColumnRef"
              },
              {
                "name": "idx_name",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "embedding",
                "required": false,
                "type": "Optional[pxt.Function]",
                "default": "None"
              },
              {
                "name": "string_embed",
                "required": false,
                "type": "Optional[pxt.Function]",
                "default": "None"
              },
              {
                "name": "image_embed",
                "required": false,
                "type": "Optional[pxt.Function]",
                "default": "None"
              },
              {
                "name": "metric",
                "required": false,
                "type": "str",
                "default": "cosine"
              },
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'ignore', 'replace', 'replace_force']",
                "default": "error"
              }
            ],
            "formatted": "(\n    column: str | ColumnRef,\n    idx_name: Optional[str] = None,\n    embedding: Optional[pxt.Function] = None,\n    string_embed: Optional[pxt.Function] = None,\n    image_embed: Optional[pxt.Function] = None,\n    metric: str = 'cosine',\n    if_exists: Literal['error', 'ignore', 'replace', 'replace_force'] = 'error'\n)",
            "returns": "None"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "column",
              "valueType": "Any",
              "description": "The name of, or reference to, the column to be indexed; must be a `String` or `Image` column."
            },
            {
              "@type": "PropertyValue",
              "name": "idx_name",
              "valueType": "Any",
              "description": "An optional name for the index. If not specified, a name such as `'idx0'` will be generated\nautomatically. If specified, the name must be unique for this table and a valid pixeltable column name."
            },
            {
              "@type": "PropertyValue",
              "name": "embedding",
              "valueType": "Any",
              "description": "The UDF to use for the embedding. Must be a UDF that accepts a single argument of type `String`\nor `Image` (as appropriate for the column being indexed) and returns a fixed-size 1-dimensional\narray of floats."
            },
            {
              "@type": "PropertyValue",
              "name": "string_embed",
              "valueType": "Any",
              "description": "An optional UDF to use for the string embedding component of this index.\nCan be used in conjunction with `image_embed` to construct multimodal embeddings manually, by\nspecifying different embedding functions for different data types."
            },
            {
              "@type": "PropertyValue",
              "name": "image_embed",
              "valueType": "Any",
              "description": "An optional UDF to use for the image embedding component of this index.\nCan be used in conjunction with `string_embed` to construct multimodal embeddings manually, by\nspecifying different embedding functions for different data types."
            },
            {
              "@type": "PropertyValue",
              "name": "metric",
              "valueType": "Any",
              "description": "Distance metric to use for the index; one of `'cosine'`, `'ip'`, or `'l2'`.\nThe default is `'cosine'`."
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Directive for handling an existing index with the same name. Must be one of the following:\n- `'error'`: raise an error if an index with the same name already exists.\n- `'ignore'`: do nothing if an index with the same name already exists.\n- `'replace'` or `'replace_force'`: replace the existing index with the new one."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.drop_embedding_index",
          "name": "drop_embedding_index",
          "description": "Drop an embedding index from the table. Either a column name or an index name (but not both) must be",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1095",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1095",
            "line": 1095,
            "lineCount": 62,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "column",
                "required": false,
                "type": "str | ColumnRef | None",
                "default": "None"
              },
              {
                "name": "idx_name",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "if_not_exists",
                "required": false,
                "type": "Literal['error', 'ignore']",
                "default": "error"
              }
            ],
            "formatted": "(\n    column: str | ColumnRef | None = None,\n    idx_name: Optional[str] = None,\n    if_not_exists: Literal['error', 'ignore'] = 'error'\n)",
            "returns": "None"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "column",
              "valueType": "Any",
              "description": "The name of, or reference to, the column from which to drop the index.\nThe column must have only one embedding index."
            },
            {
              "@type": "PropertyValue",
              "name": "idx_name",
              "valueType": "Any",
              "description": "The name of the index to drop."
            },
            {
              "@type": "PropertyValue",
              "name": "if_not_exists",
              "valueType": "Any",
              "description": "Directive for handling a non-existent index. Must be one of the following:\n- `'error'`: raise an error if the index does not exist.\n- `'ignore'`: do nothing if the index does not exist.\n\nNote that `if_not_exists` parameter is only applicable when an `idx_name` is specified\nand it does not exist, or when `column` is specified and it has no index.\n`if_not_exists` does not apply to non-exisitng column."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.drop_index",
          "name": "drop_index",
          "description": "Drop an index from the table. Either a column name or an index name (but not both) must be",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1174",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1174",
            "line": 1174,
            "lineCount": 62,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "column",
                "required": false,
                "type": "str | ColumnRef | None",
                "default": "None"
              },
              {
                "name": "idx_name",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "if_not_exists",
                "required": false,
                "type": "Literal['error', 'ignore']",
                "default": "error"
              }
            ],
            "formatted": "(\n    column: str | ColumnRef | None = None,\n    idx_name: Optional[str] = None,\n    if_not_exists: Literal['error', 'ignore'] = 'error'\n)",
            "returns": "None"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "column",
              "valueType": "Any",
              "description": "The name of, or reference to, the column from which to drop the index.\nThe column must have only one embedding index."
            },
            {
              "@type": "PropertyValue",
              "name": "idx_name",
              "valueType": "Any",
              "description": "The name of the index to drop."
            },
            {
              "@type": "PropertyValue",
              "name": "if_not_exists",
              "valueType": "Any",
              "description": "Directive for handling a non-existent index. Must be one of the following:\n- `'error'`: raise an error if the index does not exist.\n- `'ignore'`: do nothing if the index does not exist.\n\nNote that `if_not_exists` parameter is only applicable when an `idx_name` is specified\nand it does not exist, or when `column` is specified and it has no index.\n`if_not_exists` does not apply to non-exisitng column."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:Table.revert",
          "name": "revert",
          "description": "Reverts the table to the previous version.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:Table"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1597",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L1597",
            "line": 1597,
            "lineCount": 13,
            "relativePath": "pixeltable/pixeltable/catalog/table.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "None"
          }
        }
      ],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L59",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table.py#L59",
        "line": 59,
        "lineCount": 1761,
        "relativePath": "pixeltable/pixeltable/catalog/table.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "id",
            "required": true,
            "type": "UUID"
          },
          {
            "name": "dir_id",
            "required": true,
            "type": "UUID"
          },
          {
            "name": "name",
            "required": true,
            "type": "str"
          },
          {
            "name": "tbl_version_path",
            "required": true,
            "type": "TableVersionPath"
          }
        ],
        "formatted": "(\n    id: UUID,\n    dir_id: UUID,\n    name: str,\n    tbl_version_path: TableVersionPath\n)"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.DataFrame",
      "name": "DataFrame",
      "description": "Represents a query for retrieving and transforming data from Pixeltable tables.",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/DataFrame",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.select",
          "name": "select",
          "description": "Select columns or expressions from the DataFrame.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L640",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L640",
            "line": 640,
            "lineCount": 85,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "items",
                "required": true,
                "type": "Any"
              },
              {
                "name": "named_items",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    items: Any,\n    named_items: Any\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "items",
              "valueType": "Any",
              "description": "expressions to be selected"
            },
            {
              "@type": "PropertyValue",
              "name": "named_items",
              "valueType": "Any",
              "description": "named expressions to be selected"
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.where",
          "name": "where",
          "description": "Filter rows based on a predicate.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L726",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L726",
            "line": 726,
            "lineCount": 41,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "pred",
                "required": true,
                "type": "exprs.Expr"
              }
            ],
            "formatted": "(\n    pred: exprs.Expr\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pred",
              "valueType": "Any",
              "description": "the predicate to filter rows"
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.join",
          "name": "join",
          "description": "Join this DataFrame with a table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L829",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L829",
            "line": 829,
            "lineCount": 77,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "other",
                "required": true,
                "type": "catalog.Table"
              },
              {
                "name": "on",
                "required": false,
                "type": "exprs.Expr | Sequence[exprs.ColumnRef] | None",
                "default": "None"
              },
              {
                "name": "how",
                "required": false,
                "type": "plan.JoinType.LiteralType",
                "default": "inner"
              }
            ],
            "formatted": "(\n    other: catalog.Table,\n    on: exprs.Expr | Sequence[exprs.ColumnRef] | None = None,\n    how: plan.JoinType.LiteralType = 'inner'\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "other",
              "valueType": "Any",
              "description": "the table to join with"
            },
            {
              "@type": "PropertyValue",
              "name": "on",
              "valueType": "Any",
              "description": "the join condition, which can be either a) references to one or more columns or b) a boolean\nexpression.\n\n- column references: implies an equality predicate that matches columns in both this\n    DataFrame and `other` by name.\n\n    - column in `other`: A column with that same name must be present in this DataFrame, and **it must\n        be unique** (otherwise the join is ambiguous).\n    - column in this DataFrame: A column with that same name must be present in `other`.\n\n- boolean expression: The expressions must be valid in the context of the joined tables."
            },
            {
              "@type": "PropertyValue",
              "name": "how",
              "valueType": "Any",
              "description": "the type of join to perform.\n- `'inner'`: only keep rows that have a match in both\n- `'left'`: keep all rows from this DataFrame and only matching rows from the other table\n- `'right'`: keep all rows from the other table and only matching rows from this DataFrame\n- `'full_outer'`: keep all rows from both this DataFrame and the other table\n- `'cross'`: Cartesian product; no `on` condition allowed"
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.group_by",
          "name": "group_by",
          "description": "Add a group-by clause to this DataFrame.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L907",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L907",
            "line": 907,
            "lineCount": 75,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "grouping_items",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    grouping_items: Any\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "grouping_items",
              "valueType": "Any",
              "description": "expressions to group by"
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.order_by",
          "name": "order_by",
          "description": "Add an order-by clause to this DataFrame.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1006",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1006",
            "line": 1006,
            "lineCount": 46,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "expr_list",
                "required": true,
                "type": "exprs.Expr"
              },
              {
                "name": "asc",
                "required": false,
                "type": "bool",
                "default": "True"
              }
            ],
            "formatted": "(\n    expr_list: exprs.Expr,\n    asc: bool = True\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "expr_list",
              "valueType": "Any",
              "description": "expressions to order by"
            },
            {
              "@type": "PropertyValue",
              "name": "asc",
              "valueType": "Any",
              "description": "whether to order in ascending order (True) or descending order (False).\nDefault is True."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.limit",
          "name": "limit",
          "description": "Limit the number of rows in the DataFrame.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1053",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1053",
            "line": 1053,
            "lineCount": 22,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "n",
                "required": true,
                "type": "int"
              }
            ],
            "formatted": "(\n    n: int\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "n",
              "valueType": "Any",
              "description": "Number of rows to select."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.distinct",
          "name": "distinct",
          "description": "Remove duplicate rows from this DataFrame.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L983",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L983",
            "line": 983,
            "lineCount": 22,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "DataFrame"
          }
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.sample",
          "name": "sample",
          "description": "Return a new DataFrame specifying a sample of rows from the DataFrame, considered in a shuffled order.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1076",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1076",
            "line": 1076,
            "lineCount": 116,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "n",
                "required": false,
                "type": "Optional[int]",
                "default": "None"
              },
              {
                "name": "n_per_stratum",
                "required": false,
                "type": "Optional[int]",
                "default": "None"
              },
              {
                "name": "fraction",
                "required": false,
                "type": "Optional[float]",
                "default": "None"
              },
              {
                "name": "seed",
                "required": false,
                "type": "Optional[int]",
                "default": "None"
              },
              {
                "name": "stratify_by",
                "required": false,
                "type": "Any",
                "default": "None"
              }
            ],
            "formatted": "(\n    n: Optional[int] = None,\n    n_per_stratum: Optional[int] = None,\n    fraction: Optional[float] = None,\n    seed: Optional[int] = None,\n    stratify_by: Any = None\n)",
            "returns": "DataFrame"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "n",
              "valueType": "Any",
              "description": "Total number of rows to produce as a sample."
            },
            {
              "@type": "PropertyValue",
              "name": "n_per_stratum",
              "valueType": "Any",
              "description": "Number of rows to produce per stratum as a sample. This parameter is only valid if\n`stratify_by` is specified. Only one of `n` or `n_per_stratum` can be specified."
            },
            {
              "@type": "PropertyValue",
              "name": "fraction",
              "valueType": "Any",
              "description": "Fraction of available rows to produce as a sample. This parameter is not usable with `n` or\n`n_per_stratum`. The fraction must be between 0.0 and 1.0."
            },
            {
              "@type": "PropertyValue",
              "name": "seed",
              "valueType": "Any",
              "description": "Random seed for reproducible shuffling"
            },
            {
              "@type": "PropertyValue",
              "name": "stratify_by",
              "valueType": "Any",
              "description": "If specified, the sample will be stratified by these values."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.collect",
          "name": "collect",
          "description": "",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L545",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L545",
            "line": 545,
            "lineCount": 2,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "DataFrameResultSet"
          }
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.show",
          "name": "show",
          "description": "",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L396",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L396",
            "line": 396,
            "lineCount": 5,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "n",
                "required": false,
                "type": "int",
                "default": "20"
              }
            ],
            "formatted": "(\n    n: int = 20\n)",
            "returns": "DataFrameResultSet"
          }
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.head",
          "name": "head",
          "description": "Return the first n rows of the DataFrame, in insertion order of the underlying Table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L402",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L402",
            "line": 402,
            "lineCount": 26,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "n",
                "required": false,
                "type": "int",
                "default": "10"
              }
            ],
            "formatted": "(\n    n: int = 10\n)",
            "returns": "DataFrameResultSet"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "n",
              "valueType": "Any",
              "description": "Number of rows to select. Default is 10."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.tail",
          "name": "tail",
          "description": "Return the last n rows of the DataFrame, in insertion order of the underlying Table.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L429",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L429",
            "line": 429,
            "lineCount": 28,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "n",
                "required": false,
                "type": "int",
                "default": "10"
              }
            ],
            "formatted": "(\n    n: int = 10\n)",
            "returns": "DataFrameResultSet"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "n",
              "valueType": "Any",
              "description": "Number of rows to select. Default is 10."
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.to_pytorch_dataset",
          "name": "to_pytorch_dataset",
          "description": "Convert the dataframe to a pytorch IterableDataset suitable for parallel loading",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1405",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1405",
            "line": 1405,
            "lineCount": 46,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "image_format",
                "required": false,
                "type": "str",
                "default": "pt"
              }
            ],
            "formatted": "(\n    image_format: str = 'pt'\n)",
            "returns": "'torch.utils.data.IterableDataset'"
          },
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "image_format",
              "valueType": "Any",
              "description": "format of the images. Can be 'pt' (pytorch tensor) or 'np' (numpy array).\n'np' means image columns return as an RGB uint8 array of shape HxWxC.\n'pt' means image columns return as a CxHxW tensor with values in [0,1] and type torch.float32.\n    (the format output by torchvision.transforms.ToTensor())"
            }
          ]
        },
        {
          "@type": "Method",
          "@id": "pxt:DataFrame.to_coco_dataset",
          "name": "to_coco_dataset",
          "description": "Convert the dataframe to a COCO dataset.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:DataFrame"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1373",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L1373",
            "line": 1373,
            "lineCount": 31,
            "relativePath": "pixeltable/pixeltable/dataframe.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "Path"
          }
        }
      ],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L188",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/dataframe.py#L188",
        "line": 188,
        "lineCount": 1263,
        "relativePath": "pixeltable/pixeltable/dataframe.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/dataframe.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "from_clause",
            "required": false,
            "type": "Optional[plan.FromClause]",
            "default": "None"
          },
          {
            "name": "select_list",
            "required": false,
            "type": "Optional[list[tuple[exprs.Expr, Optional[str]]]]",
            "default": "None"
          },
          {
            "name": "where_clause",
            "required": false,
            "type": "Optional[exprs.Expr]",
            "default": "None"
          },
          {
            "name": "group_by_clause",
            "required": false,
            "type": "Optional[list[exprs.Expr]]",
            "default": "None"
          },
          {
            "name": "grouping_tbl",
            "required": false,
            "type": "Optional[catalog.TableVersion]",
            "default": "None"
          },
          {
            "name": "order_by_clause",
            "required": false,
            "type": "Optional[list[tuple[exprs.Expr, bool]]]",
            "default": "None"
          },
          {
            "name": "limit",
            "required": false,
            "type": "Optional[exprs.Expr]",
            "default": "None"
          },
          {
            "name": "sample_clause",
            "required": false,
            "type": "Optional[SampleClause]",
            "default": "None"
          }
        ],
        "formatted": "(\n    from_clause: Optional[plan.FromClause] = None,\n    select_list: Optional[list[tuple[exprs.Expr, Optional[str]]]] = None,\n    where_clause: Optional[exprs.Expr] = None,\n    group_by_clause: Optional[list[exprs.Expr]] = None,\n    grouping_tbl: Optional[catalog.TableVersion] = None,\n    order_by_clause: Optional[list[tuple[exprs.Expr, bool]]] = None,\n    limit: Optional[exprs.Expr] = None,\n    sample_clause: Optional[SampleClause] = None\n)"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.ColumnMetadata",
      "name": "ColumnMetadata",
      "description": "Metadata for a column of a Pixeltable table.",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/ColumnMetadata",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L5",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L5",
        "line": 5,
        "lineCount": 17,
        "relativePath": "pixeltable/pixeltable/catalog/table_metadata.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table_metadata.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "args",
            "required": true
          },
          {
            "name": "kwargs",
            "required": true
          }
        ],
        "formatted": "(\n    args,\n    kwargs\n)"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.DirContents",
      "name": "DirContents",
      "description": "Represents the contents of a Pixeltable directory.",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/DirContents",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L948",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/globals.py#L948",
        "line": 948,
        "lineCount": 9,
        "relativePath": "pixeltable/pixeltable/globals.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/globals.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "args",
            "required": true
          },
          {
            "name": "kwargs",
            "required": true
          }
        ],
        "formatted": "(\n    args,\n    kwargs\n)"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.IndexMetadata",
      "name": "IndexMetadata",
      "description": "Metadata for a column of a Pixeltable table.",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/IndexMetadata",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L31",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L31",
        "line": 31,
        "lineCount": 10,
        "relativePath": "pixeltable/pixeltable/catalog/table_metadata.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table_metadata.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "args",
            "required": true
          },
          {
            "name": "kwargs",
            "required": true
          }
        ],
        "formatted": "(\n    args,\n    kwargs\n)"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.TableMetadata",
      "name": "TableMetadata",
      "description": "Metadata for a Pixeltable table.",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/TableMetadata",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L43",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L43",
        "line": 43,
        "lineCount": 29,
        "relativePath": "pixeltable/pixeltable/catalog/table_metadata.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table_metadata.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "args",
            "required": true
          },
          {
            "name": "kwargs",
            "required": true
          }
        ],
        "formatted": "(\n    args,\n    kwargs\n)"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.UpdateStatus",
      "name": "UpdateStatus",
      "description": "Information about changes to table data or table schema",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/UpdateStatus",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [
        {
          "@type": "Method",
          "@id": "pxt:UpdateStatus.insert_to_update",
          "name": "insert_to_update",
          "description": "Convert the update status from an insert operation to an update operation.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:UpdateStatus"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/update_status.py#L83",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/update_status.py#L83",
            "line": 83,
            "lineCount": 12,
            "relativePath": "pixeltable/pixeltable/catalog/update_status.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/update_status.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "'UpdateStatus'"
          }
        },
        {
          "@type": "Method",
          "@id": "pxt:UpdateStatus.to_cascade",
          "name": "to_cascade",
          "description": "Convert the update status to a cascade update status.",
          "memberOf": {
            "@type": "Class",
            "@id": "pxt:UpdateStatus"
          },
          "sourceLocation": {
            "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/update_status.py#L96",
            "@type": "SoftwareSourceCode",
            "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/update_status.py#L96",
            "line": 96,
            "lineCount": 12,
            "relativePath": "pixeltable/pixeltable/catalog/update_status.py",
            "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/update_status.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "'UpdateStatus'"
          }
        }
      ],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/update_status.py#L53",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/update_status.py#L53",
        "line": 53,
        "lineCount": 127,
        "relativePath": "pixeltable/pixeltable/catalog/update_status.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/update_status.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "updated_cols",
            "required": false,
            "type": "list[str]",
            "default": "<factory>"
          },
          {
            "name": "cols_with_excs",
            "required": false,
            "type": "list[str]",
            "default": "<factory>"
          },
          {
            "name": "row_count_stats",
            "required": false,
            "type": "RowCountStats",
            "default": "<factory>"
          },
          {
            "name": "cascade_row_count_stats",
            "required": false,
            "type": "RowCountStats",
            "default": "<factory>"
          },
          {
            "name": "ext_row_count_stats",
            "required": false,
            "type": "RowCountStats",
            "default": "<factory>"
          }
        ],
        "formatted": "(\n    updated_cols: list[str] = <factory>,\n    cols_with_excs: list[str] = <factory>,\n    row_count_stats: RowCountStats = <factory>,\n    cascade_row_count_stats: RowCountStats = <factory>,\n    ext_row_count_stats: RowCountStats = <factory>\n)",
        "returns": "None"
      }
    },
    {
      "@type": "Class",
      "@id": "pxt:pixeltable.VersionMetadata",
      "name": "VersionMetadata",
      "description": "Metadata for a specific version of a Pixeltable table.",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/VersionMetadata",
      "memberOf": {
        "@type": "SoftwareSourceCode",
        "@id": "pxt:pixeltable"
      },
      "hasPart": [],
      "sourceLocation": {
        "@id": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L74",
        "@type": "SoftwareSourceCode",
        "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/catalog/table_metadata.py#L74",
        "line": 74,
        "lineCount": 23,
        "relativePath": "pixeltable/pixeltable/catalog/table_metadata.py",
        "localPath": "/Users/lux/repos/pixeltable/pixeltable/catalog/table_metadata.py"
      },
      "constructor": {
        "parameters": [
          {
            "name": "args",
            "required": true
          },
          {
            "name": "kwargs",
            "required": true
          }
        ],
        "formatted": "(\n    args,\n    kwargs\n)"
      }
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.audio",
      "name": "pixeltable.functions.audio",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `AudioType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/audio",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.audio.get_metadata",
          "name": "pixeltable.functions.audio.get_metadata",
          "identifier": "get_metadata",
          "description": "Gets various metadata associated with an audio file and returns it as a dictionary.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.audio"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.audio.get_metadata",
              "httpMethod": "GET"
            }
          },
          "category": "audio_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "audio",
              "valueType": "Any",
              "description": "The audio to get metadata for."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A `dict` such as the following:\n\n```json\n{\n    'size': 2568827,\n    'streams': [\n        {\n            'type': 'audio',\n            'frames': 0,\n            'duration': 2646000,\n            'metadata': {},\n            'time_base': 2.2675736961451248e-05,\n            'codec_context': {\n                'name': 'flac',\n                'profile': None,\n                'channels': 1,\n                'codec_tag': '\\x00\\x00\\x00\\x00',\n            },\n            'duration_seconds': 60.0,\n        }\n    ],\n    'bit_rate': 342510,\n    'metadata': {'encoder': 'Lavf61.1.100'},\n    'bit_exact': False,\n}\n```"
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.date",
      "name": "pixeltable.functions.date",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `DateType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/date",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.add_days",
          "name": "pixeltable.functions.date.add_days",
          "identifier": "add_days",
          "description": "Add `n` days to the date.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.add_days",
              "httpMethod": "GET"
            }
          },
          "category": "data_ingestion"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.day",
          "name": "pixeltable.functions.date.day",
          "identifier": "day",
          "description": "Between 1 and the number of days in the given month of the given year.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.day",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.isocalendar",
          "name": "pixeltable.functions.date.isocalendar",
          "identifier": "isocalendar",
          "description": "Return a dictionary with three entries: `'year'`, `'week'`, and `'weekday'`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.isocalendar",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.isoformat",
          "name": "pixeltable.functions.date.isoformat",
          "identifier": "isoformat",
          "description": "Return a string representing the date and time in ISO 8601 format.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.isoformat",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "sep",
              "valueType": "Any",
              "description": "Separator between date and time."
            },
            {
              "@type": "PropertyValue",
              "name": "timespec",
              "valueType": "Any",
              "description": "The number of additional terms in the output. See the\n[`date.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.date.isoformat)\ndocumentation for more details."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.isoweekday",
          "name": "pixeltable.functions.date.isoweekday",
          "identifier": "isoweekday",
          "description": "Return the day of the week as an integer, where Monday is 1 and Sunday is 7.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.isoweekday",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.make_date",
          "name": "pixeltable.functions.date.make_date",
          "identifier": "make_date",
          "description": "Create a date.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.make_date",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.month",
          "name": "pixeltable.functions.date.month",
          "identifier": "month",
          "description": "Between 1 and 12 inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.month",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.strftime",
          "name": "pixeltable.functions.date.strftime",
          "identifier": "strftime",
          "description": "Return a string representing the date and time, controlled by an explicit format string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.strftime",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "format",
              "valueType": "Any",
              "description": "The format string to control the output. For a complete list of formatting directives, see\n[`strftime()` and `strptime()` Behavior](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.toordinal",
          "name": "pixeltable.functions.date.toordinal",
          "identifier": "toordinal",
          "description": "Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.toordinal",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.weekday",
          "name": "pixeltable.functions.date.weekday",
          "identifier": "weekday",
          "description": "Between 0 (Monday) and 6 (Sunday) inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.weekday",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.date.year",
          "name": "pixeltable.functions.date.year",
          "identifier": "year",
          "description": "Between [`MINYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR) and",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.date"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.date.year",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.image",
      "name": "pixeltable.functions.image",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `ImageType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/image",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.alpha_composite",
          "name": "pixeltable.functions.image.alpha_composite",
          "identifier": "alpha_composite",
          "description": "Alpha composite im2 over im1.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.alpha_composite",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "im1",
              "valueType": "Any",
              "description": "The first image. Must have mode RGBA."
            },
            {
              "@type": "PropertyValue",
              "name": "im2",
              "valueType": "Any",
              "description": "The second image.  Must have mode RGBA, and the same size as\nthe first image."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An :py:class:`~PIL.Image.Image` object."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.b64_encode",
          "name": "pixeltable.functions.image.b64_encode",
          "identifier": "b64_encode",
          "description": "Convert image to a base64-encoded string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.b64_encode",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "img",
              "valueType": "Any",
              "description": "image"
            },
            {
              "@type": "PropertyValue",
              "name": "image_format",
              "valueType": "Any",
              "description": "image format [supported by PIL](https://pillow.readthedocs.io/en/stable/handbook/image-file-formats.html#fully-supported-formats)"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.blend",
          "name": "pixeltable.functions.image.blend",
          "identifier": "blend",
          "description": "Creates a new image by interpolating between two input images, using",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.blend",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "im1",
              "valueType": "Any",
              "description": "The first image."
            },
            {
              "@type": "PropertyValue",
              "name": "im2",
              "valueType": "Any",
              "description": "The second image.  Must have the same mode and size as\nthe first image."
            },
            {
              "@type": "PropertyValue",
              "name": "alpha",
              "valueType": "Any",
              "description": "The interpolation alpha factor.  If alpha is 0.0, a\ncopy of the first image is returned. If alpha is 1.0, a copy of\nthe second image is returned. There are no restrictions on the\nalpha value. If necessary, the result is clipped to fit into\nthe allowed output range."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An :py:class:`~PIL.Image.Image` object."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.composite",
          "name": "pixeltable.functions.image.composite",
          "identifier": "composite",
          "description": "Create composite image by blending images using a transparency mask.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.composite",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "image1",
              "valueType": "Any",
              "description": "The first image."
            },
            {
              "@type": "PropertyValue",
              "name": "image2",
              "valueType": "Any",
              "description": "The second image.  Must have the same mode and\nsize as the first image."
            },
            {
              "@type": "PropertyValue",
              "name": "mask",
              "valueType": "Any",
              "description": "A mask image.  This image can have mode\n\"1\", \"L\", or \"RGBA\", and must have the same size as the\nother two images."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.convert",
          "name": "pixeltable.functions.image.convert",
          "identifier": "convert",
          "description": "Convert the image to a different mode.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.convert",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "mode",
              "valueType": "Any",
              "description": "The mode to convert to. See the\n[Pillow documentation](https://pillow.readthedocs.io/en/stable/handbook/concepts.html#concept-modes)\nfor a list of supported modes."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.crop",
          "name": "pixeltable.functions.image.crop",
          "identifier": "crop",
          "description": "Returns a rectangular region from this image. The box is a",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.crop",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "box",
              "valueType": "Any",
              "description": "The crop rectangle, as a (left, upper, right, lower)-tuple."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": ":py:class:`~PIL.Image.Image`",
            "description": "An :py:class:`~PIL.Image.Image` object."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.effect_spread",
          "name": "pixeltable.functions.image.effect_spread",
          "identifier": "effect_spread",
          "description": "Randomly spread pixels in an image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.effect_spread",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "distance",
              "valueType": "Any",
              "description": "Distance to spread pixels."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.entropy",
          "name": "pixeltable.functions.image.entropy",
          "identifier": "entropy",
          "description": "Calculates and returns the entropy for the image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.entropy",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "mask",
              "valueType": "Any",
              "description": "An optional mask."
            },
            {
              "@type": "PropertyValue",
              "name": "extrema",
              "valueType": "Any",
              "description": "An optional tuple of manually-specified extrema."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A float value representing the image entropy"
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.get_metadata",
          "name": "pixeltable.functions.image.get_metadata",
          "identifier": "get_metadata",
          "description": "Return metadata for the image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.get_metadata",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getbands",
          "name": "pixeltable.functions.image.getbands",
          "identifier": "getbands",
          "description": "Returns a tuple containing the name of each band in this image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getbands",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "returns": {
            "@type": "PropertyValue",
            "valueType": "tuple",
            "description": "A tuple containing band names."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getbbox",
          "name": "pixeltable.functions.image.getbbox",
          "identifier": "getbbox",
          "description": "Calculates the bounding box of the non-zero regions in the",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getbbox",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "alpha_only",
              "valueType": "Any",
              "description": "Optional flag, defaulting to ``True``.\nIf ``True`` and the image has an alpha channel, trim transparent pixels.\nOtherwise, trim pixels when all channels are zero.\nKeyword-only argument."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The bounding box is returned as a 4-tuple defining the\nleft, upper, right, and lower pixel coordinate. See\n:ref:`coordinate-system`. If the image is completely empty, this\nmethod returns None."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getchannel",
          "name": "pixeltable.functions.image.getchannel",
          "identifier": "getchannel",
          "description": "Returns an image containing a single channel of the source image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getchannel",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "channel",
              "valueType": "Any",
              "description": "What channel to return. Could be index\n(0 for \"R\" channel of \"RGB\") or channel name\n(\"A\" for alpha channel of \"RGBA\")."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An image in \"L\" mode.\n.. versionadded:: 4.3.0"
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getcolors",
          "name": "pixeltable.functions.image.getcolors",
          "identifier": "getcolors",
          "description": "Returns a list of colors used in this image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getcolors",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "maxcolors",
              "valueType": "Any",
              "description": "Maximum number of colors.  If this number is\nexceeded, this method returns None.  The default limit is\n256 colors."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An unsorted list of (count, pixel) values."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getextrema",
          "name": "pixeltable.functions.image.getextrema",
          "identifier": "getextrema",
          "description": "Gets the minimum and maximum pixel values for each band in",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getextrema",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "For a single-band image, a 2-tuple containing the\nminimum and maximum pixel value.  For a multi-band image,\na tuple containing one 2-tuple for each band."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getpalette",
          "name": "pixeltable.functions.image.getpalette",
          "identifier": "getpalette",
          "description": "Returns the image palette as a list.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getpalette",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "rawmode",
              "valueType": "Any",
              "description": "The mode in which to return the palette. ``None`` will\nreturn the palette in its current mode.\n\n.. versionadded:: 9.1.0"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A list of color values [r, g, b, ...], or None if the\nimage has no palette."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getpixel",
          "name": "pixeltable.functions.image.getpixel",
          "identifier": "getpixel",
          "description": "Return the pixel value at the given position. The position `xy` is a tuple containing the x and y coordinates.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getpixel",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "xy",
              "valueType": "Any",
              "description": "The coordinates, given as (x, y)."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.getprojection",
          "name": "pixeltable.functions.image.getprojection",
          "identifier": "getprojection",
          "description": "Get projection to x and y axes",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.getprojection",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "Two sequences, indicating where there are non-zero\npixels along the X-axis and the Y-axis, respectively."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.height",
          "name": "pixeltable.functions.image.height",
          "identifier": "height",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.height",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.histogram",
          "name": "pixeltable.functions.image.histogram",
          "identifier": "histogram",
          "description": "Returns a histogram for the image. The histogram is returned as a",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.histogram",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "mask",
              "valueType": "Any",
              "description": "An optional mask."
            },
            {
              "@type": "PropertyValue",
              "name": "extrema",
              "valueType": "Any",
              "description": "An optional tuple of manually-specified extrema."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A list containing pixel counts."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.mode",
          "name": "pixeltable.functions.image.mode",
          "identifier": "mode",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.mode",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.point",
          "name": "pixeltable.functions.image.point",
          "identifier": "point",
          "description": "Map image pixels through a lookup table.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.point",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "lut",
              "valueType": "Any",
              "description": "A lookup table."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.quantize",
          "name": "pixeltable.functions.image.quantize",
          "identifier": "quantize",
          "description": "Convert the image to 'P' mode with the specified number",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.quantize",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "colors",
              "valueType": "Any",
              "description": "The desired number of colors, <= 256"
            },
            {
              "@type": "PropertyValue",
              "name": "method",
              "valueType": "Any",
              "description": ":data:`Quantize.MEDIANCUT` (median cut),\n:data:`Quantize.MAXCOVERAGE` (maximum coverage),\n:data:`Quantize.FASTOCTREE` (fast octree),\n:data:`Quantize.LIBIMAGEQUANT` (libimagequant; check support\nusing :py:func:`PIL.features.check_feature` with\n``feature=\"libimagequant\"``).\n\nBy default, :data:`Quantize.MEDIANCUT` will be used.\n\nThe exception to this is RGBA images. :data:`Quantize.MEDIANCUT`\nand :data:`Quantize.MAXCOVERAGE` do not support RGBA images, so\n:data:`Quantize.FASTOCTREE` is used by default instead."
            },
            {
              "@type": "PropertyValue",
              "name": "kmeans",
              "valueType": "Any",
              "description": "Integer greater than or equal to zero."
            },
            {
              "@type": "PropertyValue",
              "name": "palette",
              "valueType": "Any",
              "description": "Quantize to the palette of given\n:py:class:`PIL.Image.Image`."
            },
            {
              "@type": "PropertyValue",
              "name": "dither",
              "valueType": "Any",
              "description": "Dithering method, used when converting from\nmode \"RGB\" to \"P\" or from \"RGB\" or \"L\" to \"1\".\nAvailable methods are :data:`Dither.NONE` or :data:`Dither.FLOYDSTEINBERG`\n(default)."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A new image"
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.reduce",
          "name": "pixeltable.functions.image.reduce",
          "identifier": "reduce",
          "description": "Returns a copy of the image reduced ``factor`` times.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.reduce",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "factor",
              "valueType": "Any",
              "description": "A greater than 0 integer or tuple of two integers\nfor width and height separately."
            },
            {
              "@type": "PropertyValue",
              "name": "box",
              "valueType": "Any",
              "description": "An optional 4-tuple of ints providing\nthe source image region to be reduced.\nThe values must be within ``(0, 0, width, height)`` rectangle.\nIf omitted or ``None``, the entire source is used."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.resize",
          "name": "pixeltable.functions.image.resize",
          "identifier": "resize",
          "description": "Return a resized copy of the image. The size parameter is a tuple containing the width and height of the new image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.resize",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.rotate",
          "name": "pixeltable.functions.image.rotate",
          "identifier": "rotate",
          "description": "Return a copy of the image rotated by the given angle.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.rotate",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "angle",
              "valueType": "Any",
              "description": "The angle to rotate the image, in degrees. Positive angles are counter-clockwise."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.transpose",
          "name": "pixeltable.functions.image.transpose",
          "identifier": "transpose",
          "description": "Transpose image (flip or rotate in 90 degree steps)",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.transpose",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "method",
              "valueType": "Any",
              "description": "One of :py:data:`Transpose.FLIP_LEFT_RIGHT`,\n:py:data:`Transpose.FLIP_TOP_BOTTOM`, :py:data:`Transpose.ROTATE_90`,\n:py:data:`Transpose.ROTATE_180`, :py:data:`Transpose.ROTATE_270`,\n:py:data:`Transpose.TRANSPOSE` or :py:data:`Transpose.TRANSVERSE`."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "Returns a flipped or rotated copy of this image."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.image.width",
          "name": "pixeltable.functions.image.width",
          "identifier": "width",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.image"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.image.width",
              "httpMethod": "GET"
            }
          },
          "category": "image_processing"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.json",
      "name": "pixeltable.functions.json",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `JsonType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/json",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.json.make_list",
          "name": "pixeltable.functions.json.make_list",
          "identifier": "make_list",
          "description": "Collects arguments into a list.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.json"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.json.make_list",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.math",
      "name": "pixeltable.functions.math",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for mathematical operations.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/math",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.abs",
          "name": "pixeltable.functions.math.abs",
          "identifier": "abs",
          "description": "Return the absolute value of the given number.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.abs",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.bitwise_and",
          "name": "pixeltable.functions.math.bitwise_and",
          "identifier": "bitwise_and",
          "description": "Bitwise AND of two integers.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.bitwise_and",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.bitwise_or",
          "name": "pixeltable.functions.math.bitwise_or",
          "identifier": "bitwise_or",
          "description": "Bitwise OR of two integers.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.bitwise_or",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.bitwise_xor",
          "name": "pixeltable.functions.math.bitwise_xor",
          "identifier": "bitwise_xor",
          "description": "Bitwise XOR of two integers.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.bitwise_xor",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.ceil",
          "name": "pixeltable.functions.math.ceil",
          "identifier": "ceil",
          "description": "Return the ceiling of the given number.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.ceil",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.floor",
          "name": "pixeltable.functions.math.floor",
          "identifier": "floor",
          "description": "Return the ceiling of the given number.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.floor",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.pow",
          "name": "pixeltable.functions.math.pow",
          "identifier": "pow",
          "description": "Raise `self` to the power of `other`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.pow",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.math.round",
          "name": "pixeltable.functions.math.round",
          "identifier": "round",
          "description": "Round a number to a given precision in decimal digits.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.math"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.math.round",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.string",
      "name": "pixeltable.functions.string",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `StringType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/string",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.capitalize",
          "name": "pixeltable.functions.string.capitalize",
          "identifier": "capitalize",
          "description": "Return string with its first character capitalized and the rest lowercased.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.capitalize",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.casefold",
          "name": "pixeltable.functions.string.casefold",
          "identifier": "casefold",
          "description": "Return a casefolded copy of string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.casefold",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.center",
          "name": "pixeltable.functions.string.center",
          "identifier": "center",
          "description": "Return a centered string of length `width`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.center",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Total width of the resulting string."
            },
            {
              "@type": "PropertyValue",
              "name": "fillchar",
              "valueType": "Any",
              "description": "Character used for padding."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.contains",
          "name": "pixeltable.functions.string.contains",
          "identifier": "contains",
          "description": "Test if string contains a substring.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.contains",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "string literal or regular expression"
            },
            {
              "@type": "PropertyValue",
              "name": "case",
              "valueType": "Any",
              "description": "if False, ignore case"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.contains_re",
          "name": "pixeltable.functions.string.contains_re",
          "identifier": "contains_re",
          "description": "Test if string contains a regular expression pattern.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.contains_re",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pattern",
              "valueType": "Any",
              "description": "regular expression pattern"
            },
            {
              "@type": "PropertyValue",
              "name": "flags",
              "valueType": "Any",
              "description": "[flags](https://docs.python.org/3/library/re.html#flags) for the `re` module"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.count",
          "name": "pixeltable.functions.string.count",
          "identifier": "count",
          "description": "Count occurrences of pattern or regex.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.count",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pattern",
              "valueType": "Any",
              "description": "string literal or regular expression"
            },
            {
              "@type": "PropertyValue",
              "name": "flags",
              "valueType": "Any",
              "description": "[flags](https://docs.python.org/3/library/re.html#flags) for the `re` module"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.endswith",
          "name": "pixeltable.functions.string.endswith",
          "identifier": "endswith",
          "description": "Return `True` if the string ends with the specified suffix, otherwise return `False`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.endswith",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "string literal"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.fill",
          "name": "pixeltable.functions.string.fill",
          "identifier": "fill",
          "description": "Wraps the single paragraph in string, and returns a single string containing the wrapped paragraph.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.fill",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Maximum line width."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Additional keyword arguments to pass to `textwrap.fill()`."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.find",
          "name": "pixeltable.functions.string.find",
          "identifier": "find",
          "description": "Return the lowest index in string where `substr` is found within the slice `s[start:end]`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.find",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "substring to search for"
            },
            {
              "@type": "PropertyValue",
              "name": "start",
              "valueType": "Any",
              "description": "slice start"
            },
            {
              "@type": "PropertyValue",
              "name": "end",
              "valueType": "Any",
              "description": "slice end"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.findall",
          "name": "pixeltable.functions.string.findall",
          "identifier": "findall",
          "description": "Find all occurrences of a regular expression pattern in string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.findall",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pattern",
              "valueType": "Any",
              "description": "regular expression pattern"
            },
            {
              "@type": "PropertyValue",
              "name": "flags",
              "valueType": "Any",
              "description": "[flags](https://docs.python.org/3/library/re.html#flags) for the `re` module"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.format",
          "name": "pixeltable.functions.string.format",
          "identifier": "format",
          "description": "Perform string formatting.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.format",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.fullmatch",
          "name": "pixeltable.functions.string.fullmatch",
          "identifier": "fullmatch",
          "description": "Determine if string fully matches a regular expression.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.fullmatch",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pattern",
              "valueType": "Any",
              "description": "regular expression pattern"
            },
            {
              "@type": "PropertyValue",
              "name": "case",
              "valueType": "Any",
              "description": "if False, ignore case"
            },
            {
              "@type": "PropertyValue",
              "name": "flags",
              "valueType": "Any",
              "description": "[flags](https://docs.python.org/3/library/re.html#flags) for the `re` module"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.index",
          "name": "pixeltable.functions.string.index",
          "identifier": "index",
          "description": "Return the lowest index in string where `substr` is found within the slice `[start:end]`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.index",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "substring to search for"
            },
            {
              "@type": "PropertyValue",
              "name": "start",
              "valueType": "Any",
              "description": "slice start"
            },
            {
              "@type": "PropertyValue",
              "name": "end",
              "valueType": "Any",
              "description": "slice end"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isalnum",
          "name": "pixeltable.functions.string.isalnum",
          "identifier": "isalnum",
          "description": "Return `True` if all characters in the string are alphanumeric and there is at least one character, `False`",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isalnum",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isalpha",
          "name": "pixeltable.functions.string.isalpha",
          "identifier": "isalpha",
          "description": "Return `True` if all characters in the string are alphabetic and there is at least one character, `False` otherwise.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isalpha",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isascii",
          "name": "pixeltable.functions.string.isascii",
          "identifier": "isascii",
          "description": "Return `True` if the string is empty or all characters in the string are ASCII, `False` otherwise.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isascii",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isdecimal",
          "name": "pixeltable.functions.string.isdecimal",
          "identifier": "isdecimal",
          "description": "Return `True` if all characters in the string are decimal characters and there is at least one character, `False`",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isdecimal",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isdigit",
          "name": "pixeltable.functions.string.isdigit",
          "identifier": "isdigit",
          "description": "Return `True` if all characters in the string are digits and there is at least one character, `False` otherwise.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isdigit",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isidentifier",
          "name": "pixeltable.functions.string.isidentifier",
          "identifier": "isidentifier",
          "description": "Return `True` if the string is a valid identifier according to the language definition, `False` otherwise.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isidentifier",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.islower",
          "name": "pixeltable.functions.string.islower",
          "identifier": "islower",
          "description": "Return `True` if all cased characters in the string are lowercase and there is at least one cased character,",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.islower",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isnumeric",
          "name": "pixeltable.functions.string.isnumeric",
          "identifier": "isnumeric",
          "description": "Return `True` if all characters in the string are numeric characters, `False` otherwise.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isnumeric",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isspace",
          "name": "pixeltable.functions.string.isspace",
          "identifier": "isspace",
          "description": "Return `True` if there are only whitespace characters in the string and there is at least one character,",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isspace",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.istitle",
          "name": "pixeltable.functions.string.istitle",
          "identifier": "istitle",
          "description": "Return `True` if the string is a titlecased string and there is at least one character, `False` otherwise.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.istitle",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.isupper",
          "name": "pixeltable.functions.string.isupper",
          "identifier": "isupper",
          "description": "Return `True` if all cased characters in the string are uppercase and there is at least one cased character,",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.isupper",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.join",
          "name": "pixeltable.functions.string.join",
          "identifier": "join",
          "description": "Return a string which is the concatenation of the strings in `elements`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.join",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.len",
          "name": "pixeltable.functions.string.len",
          "identifier": "len",
          "description": "Return the number of characters in the string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.len",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.ljust",
          "name": "pixeltable.functions.string.ljust",
          "identifier": "ljust",
          "description": "Return the string left-justified in a string of length `width`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.ljust",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Minimum width of resulting string; additional characters will be filled with character defined in\n`fillchar`."
            },
            {
              "@type": "PropertyValue",
              "name": "fillchar",
              "valueType": "Any",
              "description": "Additional character for filling."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.lower",
          "name": "pixeltable.functions.string.lower",
          "identifier": "lower",
          "description": "Return a copy of the string with all the cased characters converted to lowercase.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.lower",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.lstrip",
          "name": "pixeltable.functions.string.lstrip",
          "identifier": "lstrip",
          "description": "Return a copy of the string with leading characters removed. The `chars` argument is a string specifying the set of",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.lstrip",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "chars",
              "valueType": "Any",
              "description": "The set of characters to be removed."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.match",
          "name": "pixeltable.functions.string.match",
          "identifier": "match",
          "description": "Determine if string starts with a match of a regular expression",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.match",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pattern",
              "valueType": "Any",
              "description": "regular expression pattern"
            },
            {
              "@type": "PropertyValue",
              "name": "case",
              "valueType": "Any",
              "description": "if False, ignore case"
            },
            {
              "@type": "PropertyValue",
              "name": "flags",
              "valueType": "Any",
              "description": "[flags](https://docs.python.org/3/library/re.html#flags) for the `re` module"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.normalize",
          "name": "pixeltable.functions.string.normalize",
          "identifier": "normalize",
          "description": "Return the Unicode normal form.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.normalize",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "form",
              "valueType": "Any",
              "description": "Unicode normal form (`'NFC'`, `'NFKC'`, `'NFD'`, `'NFKD'`)"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.pad",
          "name": "pixeltable.functions.string.pad",
          "identifier": "pad",
          "description": "Pad string up to width",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.pad",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Minimum width of resulting string; additional characters will be filled with character defined in\n`fillchar`."
            },
            {
              "@type": "PropertyValue",
              "name": "side",
              "valueType": "Any",
              "description": "Side from which to fill resulting string (`'left'`, `'right'`, `'both'`)"
            },
            {
              "@type": "PropertyValue",
              "name": "fillchar",
              "valueType": "Any",
              "description": "Additional character for filling"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.partition",
          "name": "pixeltable.functions.string.partition",
          "identifier": "partition",
          "description": "Splits string at the first occurrence of `sep`, and returns 3 elements containing the part before the",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.partition",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.removeprefix",
          "name": "pixeltable.functions.string.removeprefix",
          "identifier": "removeprefix",
          "description": "Remove prefix. If the prefix is not present, returns string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.removeprefix",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.removesuffix",
          "name": "pixeltable.functions.string.removesuffix",
          "identifier": "removesuffix",
          "description": "Remove suffix. If the suffix is not present, returns string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.removesuffix",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.repeat",
          "name": "pixeltable.functions.string.repeat",
          "identifier": "repeat",
          "description": "Repeat string `n` times.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.repeat",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.replace",
          "name": "pixeltable.functions.string.replace",
          "identifier": "replace",
          "description": "Replace occurrences of `substr` with `repl`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.replace",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "string literal"
            },
            {
              "@type": "PropertyValue",
              "name": "repl",
              "valueType": "Any",
              "description": "replacement string"
            },
            {
              "@type": "PropertyValue",
              "name": "n",
              "valueType": "Any",
              "description": "number of replacements to make (if `None`, replace all occurrences)"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.replace_re",
          "name": "pixeltable.functions.string.replace_re",
          "identifier": "replace_re",
          "description": "Replace occurrences of a regular expression pattern with `repl`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.replace_re",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pattern",
              "valueType": "Any",
              "description": "regular expression pattern"
            },
            {
              "@type": "PropertyValue",
              "name": "repl",
              "valueType": "Any",
              "description": "replacement string"
            },
            {
              "@type": "PropertyValue",
              "name": "n",
              "valueType": "Any",
              "description": "number of replacements to make (if `None`, replace all occurrences)"
            },
            {
              "@type": "PropertyValue",
              "name": "flags",
              "valueType": "Any",
              "description": "[flags](https://docs.python.org/3/library/re.html#flags) for the `re` module"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.reverse",
          "name": "pixeltable.functions.string.reverse",
          "identifier": "reverse",
          "description": "Return a reversed copy of the string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.reverse",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.rfind",
          "name": "pixeltable.functions.string.rfind",
          "identifier": "rfind",
          "description": "Return the highest index where `substr` is found, such that `substr` is contained within `[start:end]`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.rfind",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "substring to search for"
            },
            {
              "@type": "PropertyValue",
              "name": "start",
              "valueType": "Any",
              "description": "slice start"
            },
            {
              "@type": "PropertyValue",
              "name": "end",
              "valueType": "Any",
              "description": "slice end"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.rindex",
          "name": "pixeltable.functions.string.rindex",
          "identifier": "rindex",
          "description": "Return the highest index where `substr` is found, such that `substr` is contained within `[start:end]`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.rindex",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.rjust",
          "name": "pixeltable.functions.string.rjust",
          "identifier": "rjust",
          "description": "Return the string right-justified in a string of length `width`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.rjust",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Minimum width of resulting string."
            },
            {
              "@type": "PropertyValue",
              "name": "fillchar",
              "valueType": "Any",
              "description": "Additional character for filling."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.rpartition",
          "name": "pixeltable.functions.string.rpartition",
          "identifier": "rpartition",
          "description": "This method splits string at the last occurrence of `sep`, and returns a list containing the part before the",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.rpartition",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.rstrip",
          "name": "pixeltable.functions.string.rstrip",
          "identifier": "rstrip",
          "description": "Return a copy of string with trailing characters removed.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.rstrip",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "chars",
              "valueType": "Any",
              "description": "The set of characters to be removed. If omitted or `None`, whitespace characters are removed."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.slice",
          "name": "pixeltable.functions.string.slice",
          "identifier": "slice",
          "description": "Return a slice.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.slice",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "start",
              "valueType": "Any",
              "description": "slice start"
            },
            {
              "@type": "PropertyValue",
              "name": "stop",
              "valueType": "Any",
              "description": "slice end"
            },
            {
              "@type": "PropertyValue",
              "name": "step",
              "valueType": "Any",
              "description": "slice step"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.slice_replace",
          "name": "pixeltable.functions.string.slice_replace",
          "identifier": "slice_replace",
          "description": "Replace a positional slice with another value.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.slice_replace",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "start",
              "valueType": "Any",
              "description": "slice start"
            },
            {
              "@type": "PropertyValue",
              "name": "stop",
              "valueType": "Any",
              "description": "slice end"
            },
            {
              "@type": "PropertyValue",
              "name": "repl",
              "valueType": "Any",
              "description": "replacement value"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.startswith",
          "name": "pixeltable.functions.string.startswith",
          "identifier": "startswith",
          "description": "Return `True` if string starts with `substr`, otherwise return `False`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.startswith",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "substr",
              "valueType": "Any",
              "description": "string literal"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.strip",
          "name": "pixeltable.functions.string.strip",
          "identifier": "strip",
          "description": "Return a copy of string with leading and trailing characters removed.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.strip",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "chars",
              "valueType": "Any",
              "description": "The set of characters to be removed. If omitted or `None`, whitespace characters are removed."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.swapcase",
          "name": "pixeltable.functions.string.swapcase",
          "identifier": "swapcase",
          "description": "Return a copy of string with uppercase characters converted to lowercase and vice versa.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.swapcase",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.title",
          "name": "pixeltable.functions.string.title",
          "identifier": "title",
          "description": "Return a titlecased version of string, i.e. words start with uppercase characters, all remaining cased characters",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.title",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.upper",
          "name": "pixeltable.functions.string.upper",
          "identifier": "upper",
          "description": "Return a copy of string converted to uppercase.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.upper",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.wrap",
          "name": "pixeltable.functions.string.wrap",
          "identifier": "wrap",
          "description": "Wraps the single paragraph in string so every line is at most `width` characters long.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.wrap",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Maximum line width."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Additional keyword arguments to pass to `textwrap.fill()`."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.string.zfill",
          "name": "pixeltable.functions.string.zfill",
          "identifier": "zfill",
          "description": "Pad a numeric string with ASCII `0` on the left to a total length of `width`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.string"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.string.zfill",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Minimum width of resulting string."
            }
          ]
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.timestamp",
      "name": "pixeltable.functions.timestamp",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `TimestampType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/timestamp",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.astimezone",
          "name": "pixeltable.functions.timestamp.astimezone",
          "identifier": "astimezone",
          "description": "Convert the datetime to the given time zone.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.astimezone",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "tz",
              "valueType": "Any",
              "description": "The time zone to convert to. Must be a valid time zone name from the IANA Time Zone Database."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.day",
          "name": "pixeltable.functions.timestamp.day",
          "identifier": "day",
          "description": "Between 1 and the number of days in the given month of the given year.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.day",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.hour",
          "name": "pixeltable.functions.timestamp.hour",
          "identifier": "hour",
          "description": "Between 0 and 23 inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.hour",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.isocalendar",
          "name": "pixeltable.functions.timestamp.isocalendar",
          "identifier": "isocalendar",
          "description": "Return a dictionary with three entries: `'year'`, `'week'`, and `'weekday'`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.isocalendar",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.isoformat",
          "name": "pixeltable.functions.timestamp.isoformat",
          "identifier": "isoformat",
          "description": "Return a string representing the date and time in ISO 8601 format.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.isoformat",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "sep",
              "valueType": "Any",
              "description": "Separator between date and time."
            },
            {
              "@type": "PropertyValue",
              "name": "timespec",
              "valueType": "Any",
              "description": "The number of additional terms in the output. See the\n[`datetime.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat)\ndocumentation for more details."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.isoweekday",
          "name": "pixeltable.functions.timestamp.isoweekday",
          "identifier": "isoweekday",
          "description": "Return the day of the week as an integer, where Monday is 1 and Sunday is 7.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.isoweekday",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.make_timestamp",
          "name": "pixeltable.functions.timestamp.make_timestamp",
          "identifier": "make_timestamp",
          "description": "Create a timestamp.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.make_timestamp",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.microsecond",
          "name": "pixeltable.functions.timestamp.microsecond",
          "identifier": "microsecond",
          "description": "Between 0 and 999999 inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.microsecond",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.minute",
          "name": "pixeltable.functions.timestamp.minute",
          "identifier": "minute",
          "description": "Between 0 and 59 inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.minute",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.month",
          "name": "pixeltable.functions.timestamp.month",
          "identifier": "month",
          "description": "Between 1 and 12 inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.month",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.posix_timestamp",
          "name": "pixeltable.functions.timestamp.posix_timestamp",
          "identifier": "posix_timestamp",
          "description": "Return POSIX timestamp corresponding to the datetime instance.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.posix_timestamp",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.replace",
          "name": "pixeltable.functions.timestamp.replace",
          "identifier": "replace",
          "description": "Return a datetime with the same attributes, except for those attributes given new values by whichever keyword",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.replace",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.second",
          "name": "pixeltable.functions.timestamp.second",
          "identifier": "second",
          "description": "Between 0 and 59 inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.second",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.strftime",
          "name": "pixeltable.functions.timestamp.strftime",
          "identifier": "strftime",
          "description": "Return a string representing the date and time, controlled by an explicit format string.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.strftime",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "format",
              "valueType": "Any",
              "description": "The format string to control the output. For a complete list of formatting directives, see\n[`strftime()` and `strptime()` Behavior](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior)."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.toordinal",
          "name": "pixeltable.functions.timestamp.toordinal",
          "identifier": "toordinal",
          "description": "Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.toordinal",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.weekday",
          "name": "pixeltable.functions.timestamp.weekday",
          "identifier": "weekday",
          "description": "Between 0 (Monday) and 6 (Sunday) inclusive.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.weekday",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.timestamp.year",
          "name": "pixeltable.functions.timestamp.year",
          "identifier": "year",
          "description": "Between [`MINYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR) and",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.timestamp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.timestamp.year",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.video",
      "name": "pixeltable.functions.video",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for `VideoType`.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/video",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.clip",
          "name": "pixeltable.functions.video.clip",
          "identifier": "clip",
          "description": "Extract a clip from a video, specified by `start_time` and either `end_time` or `duration` (in seconds).",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.clip",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "video",
              "valueType": "Any",
              "description": "Input video file"
            },
            {
              "@type": "PropertyValue",
              "name": "start_time",
              "valueType": "Any",
              "description": "Start time in seconds"
            },
            {
              "@type": "PropertyValue",
              "name": "end_time",
              "valueType": "Any",
              "description": "End time in seconds"
            },
            {
              "@type": "PropertyValue",
              "name": "duration",
              "valueType": "Any",
              "description": "Duration of the clip in seconds"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "New video containing only the specified time range or None if start_time is beyond the end of the video."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.concat_videos",
          "name": "pixeltable.functions.video.concat_videos",
          "identifier": "concat_videos",
          "description": "Merge multiple videos into a single video.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.concat_videos",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "videos",
              "valueType": "Any",
              "description": "List of videos to merge."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A new video containing the merged videos."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.extract_audio",
          "name": "pixeltable.functions.video.extract_audio",
          "identifier": "extract_audio",
          "description": "Extract an audio stream from a video.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.extract_audio",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "stream_idx",
              "valueType": "Any",
              "description": "Index of the audio stream to extract."
            },
            {
              "@type": "PropertyValue",
              "name": "format",
              "valueType": "Any",
              "description": "The target audio format. (`'wav'`, `'mp3'`, `'flac'`)."
            },
            {
              "@type": "PropertyValue",
              "name": "codec",
              "valueType": "Any",
              "description": "The codec to use for the audio stream. If not provided, a default codec will be used."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The extracted audio."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.extract_frame",
          "name": "pixeltable.functions.video.extract_frame",
          "identifier": "extract_frame",
          "description": "Extract a single frame from a video at a specific timestamp.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.extract_frame",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "video",
              "valueType": "Any",
              "description": "The video from which to extract the frame."
            },
            {
              "@type": "PropertyValue",
              "name": "timestamp",
              "valueType": "Any",
              "description": "Extract frame at this timestamp (in seconds)."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The extracted frame as a PIL Image, or None if the timestamp is beyond the video duration."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.get_duration",
          "name": "pixeltable.functions.video.get_duration",
          "identifier": "get_duration",
          "description": "Get video duration in seconds.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.get_duration",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "video",
              "valueType": "Any",
              "description": "The video for which to get the duration."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The duration in seconds, or None if the duration cannot be determined."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.get_metadata",
          "name": "pixeltable.functions.video.get_metadata",
          "identifier": "get_metadata",
          "description": "Gets various metadata associated with a video file and returns it as a dictionary.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.get_metadata",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "video",
              "valueType": "Any",
              "description": "The video for which to get metadata."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A `dict` such as the following:\n\n```json\n{\n    'bit_exact': False,\n    'bit_rate': 967260,\n    'size': 2234371,\n    'metadata': {\n        'encoder': 'Lavf60.16.100',\n        'major_brand': 'isom',\n        'minor_version': '512',\n        'compatible_brands': 'isomiso2avc1mp41',\n    },\n    'streams': [\n        {\n            'type': 'video',\n            'width': 640,\n            'height': 360,\n            'frames': 462,\n            'time_base': 1.0 / 12800,\n            'duration': 236544,\n            'duration_seconds': 236544.0 / 12800,\n            'average_rate': 25.0,\n            'base_rate': 25.0,\n            'guessed_rate': 25.0,\n            'metadata': {\n                'language': 'und',\n                'handler_name': 'L-SMASH Video Handler',\n                'vendor_id': '[0][0][0][0]',\n                'encoder': 'Lavc60.31.102 libx264',\n            },\n            'codec_context': {'name': 'h264', 'codec_tag': 'avc1', 'profile': 'High', 'pix_fmt': 'yuv420p'},\n        }\n    ],\n}\n```"
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.make_video",
          "name": "pixeltable.functions.video.make_video",
          "identifier": "make_video",
          "description": "Aggregator that creates a video from a sequence of images, using the default video encoder and yuv420p pixel format.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.make_video",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "fps",
              "valueType": "Any",
              "description": "Frames per second for the output video."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": ""
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.overlay_text",
          "name": "pixeltable.functions.video.overlay_text",
          "identifier": "overlay_text",
          "description": "Overlay text on a video with customizable positioning and styling.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.overlay_text",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "video",
              "valueType": "Any",
              "description": "Input video to overlay text on."
            },
            {
              "@type": "PropertyValue",
              "name": "text",
              "valueType": "Any",
              "description": "The text string to overlay on the video."
            },
            {
              "@type": "PropertyValue",
              "name": "font",
              "valueType": "Any",
              "description": "Font family or path to font file. If None, uses the system default."
            },
            {
              "@type": "PropertyValue",
              "name": "font_size",
              "valueType": "Any",
              "description": "Size of the text in points."
            },
            {
              "@type": "PropertyValue",
              "name": "color",
              "valueType": "Any",
              "description": "Text color (e.g., `'white'`, `'red'`, `'#FF0000'`)."
            },
            {
              "@type": "PropertyValue",
              "name": "opacity",
              "valueType": "Any",
              "description": "Text opacity from 0.0 (transparent) to 1.0 (opaque)."
            },
            {
              "@type": "PropertyValue",
              "name": "horizontal_align",
              "valueType": "Any",
              "description": "Horizontal text alignment (`'left'`, `'center'`, `'right'`)."
            },
            {
              "@type": "PropertyValue",
              "name": "horizontal_margin",
              "valueType": "Any",
              "description": "Horizontal margin in pixels from the alignment edge."
            },
            {
              "@type": "PropertyValue",
              "name": "vertical_align",
              "valueType": "Any",
              "description": "Vertical text alignment (`'top'`, `'center'`, `'bottom'`)."
            },
            {
              "@type": "PropertyValue",
              "name": "vertical_margin",
              "valueType": "Any",
              "description": "Vertical margin in pixels from the alignment edge."
            },
            {
              "@type": "PropertyValue",
              "name": "box",
              "valueType": "Any",
              "description": "Whether to draw a background box behind the text."
            },
            {
              "@type": "PropertyValue",
              "name": "box_color",
              "valueType": "Any",
              "description": "Background box color as a string."
            },
            {
              "@type": "PropertyValue",
              "name": "box_opacity",
              "valueType": "Any",
              "description": "Background box opacity from 0.0 to 1.0."
            },
            {
              "@type": "PropertyValue",
              "name": "box_border",
              "valueType": "Any",
              "description": "Padding around text in the box in pixels.\n- `[10]`: 10 pixels on all sides\n- `[10, 20]`: 10 pixels on top/bottom, 20 on left/right\n- `[10, 20, 30]`: 10 pixels on top, 20 on left/right, 30 on bottom\n- `[10, 20, 30, 40]`: 10 pixels on top, 20 on right, 30 on bottom, 40 on left"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A new video with the text overlay applied."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.video.segment_video",
          "name": "pixeltable.functions.video.segment_video",
          "identifier": "segment_video",
          "description": "Split a video into fixed-size segments.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.video"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.video.segment_video",
              "httpMethod": "GET"
            }
          },
          "category": "video_processing",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "video",
              "valueType": "Any",
              "description": "Input video file to segment"
            },
            {
              "@type": "PropertyValue",
              "name": "duration",
              "valueType": "Any",
              "description": "Approximate duration of each segment (in seconds)."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "List of file paths for the generated video segments."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.openai",
      "name": "pixeltable.functions.openai",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/openai",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.speech",
          "name": "pixeltable.functions.openai.speech",
          "identifier": "speech",
          "description": "Generates audio from the input text.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.speech",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "The text to synthesize into speech."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for speech synthesis."
            },
            {
              "@type": "PropertyValue",
              "name": "voice",
              "valueType": "Any",
              "description": "The voice profile to use for speech synthesis. Supported options include:\n`alloy`, `echo`, `fable`, `onyx`, `nova`, and `shimmer`."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the OpenAI `audio/speech` API. For details on the available\nparameters, see: <https://platform.openai.com/docs/api-reference/audio/createSpeech>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An audio file containing the synthesized speech."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.transcriptions",
          "name": "pixeltable.functions.openai.transcriptions",
          "identifier": "transcriptions",
          "description": "Transcribes audio into the input language.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.transcriptions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "audio",
              "valueType": "Any",
              "description": "The audio to transcribe."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for speech transcription."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the OpenAI `audio/transcriptions` API. For details on the available\nparameters, see: <https://platform.openai.com/docs/api-reference/audio/createTranscription>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the transcription and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.translations",
          "name": "pixeltable.functions.openai.translations",
          "identifier": "translations",
          "description": "Translates audio into English.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.translations",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "audio",
              "valueType": "Any",
              "description": "The audio to translate."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for speech transcription and translation."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the OpenAI `audio/translations` API. For details on the available\nparameters, see: <https://platform.openai.com/docs/api-reference/audio/createTranslation>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the translation and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.chat_completions",
          "name": "pixeltable.functions.openai.chat_completions",
          "identifier": "chat_completions",
          "description": "Creates a model response for the given chat conversation.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.chat_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "A list of messages to use for chat completion, as described in the OpenAI API documentation."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for chat completion."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the OpenAI `chat/completions` API. For details on the available\nparameters, see: <https://platform.openai.com/docs/api-reference/chat/create>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.vision",
          "name": "pixeltable.functions.openai.vision",
          "identifier": "vision",
          "description": "Analyzes an image with the OpenAI vision capability. This is a convenience function that takes an image and",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.vision",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "A prompt for the OpenAI vision request."
            },
            {
              "@type": "PropertyValue",
              "name": "image",
              "valueType": "Any",
              "description": "The image to analyze."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for OpenAI vision."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The response from the OpenAI vision API."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.embeddings",
          "name": "pixeltable.functions.openai.embeddings",
          "identifier": "embeddings",
          "description": "Creates an embedding vector representing the input text.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.embeddings",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "The text to embed."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for the embedding."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the OpenAI `embeddings` API. For details on the available\nparameters, see: <https://platform.openai.com/docs/api-reference/embeddings>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An array representing the application of the given embedding to `input`."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.image_generations",
          "name": "pixeltable.functions.openai.image_generations",
          "identifier": "image_generations",
          "description": "Creates an image given a prompt.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.image_generations",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "Prompt for the image."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for the generations."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the OpenAI `images/generations` API. For details on the available\nparameters, see: <https://platform.openai.com/docs/api-reference/images/create>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The generated image."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.moderations",
          "name": "pixeltable.functions.openai.moderations",
          "identifier": "moderations",
          "description": "Classifies if text is potentially harmful.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.moderations",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "Text to analyze with the moderations model."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for moderations."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "Details of the moderations results."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.openai.invoke_tools",
          "name": "pixeltable.functions.openai.invoke_tools",
          "identifier": "invoke_tools",
          "description": "Converts an OpenAI response dict to Pixeltable tool invocation format and calls `tools._invoke()`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.openai"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/openai.py#L758",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/openai.py#L758",
          "codeLocation": {
            "startLine": 758,
            "lineCount": 3,
            "relativePath": "pixeltable/pixeltable/functions/openai.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tools",
                "required": true,
                "type": "<class 'pixeltable.func.tools.Tools'>"
              },
              {
                "name": "response",
                "required": true,
                "type": "<class 'pixeltable.exprs.expr.Expr'>"
              }
            ],
            "formatted": "(\n    tools: <class 'pixeltable.func.tools.Tools'>,\n    response: <class 'pixeltable.exprs.expr.Expr'>\n)",
            "returns": "<class 'pixeltable.exprs.inline_expr.InlineDict'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.openai.invoke_tools",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.anthropic",
      "name": "pixeltable.functions.anthropic",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/anthropic",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.anthropic.messages",
          "name": "pixeltable.functions.anthropic.messages",
          "identifier": "messages",
          "description": "Create a Message.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.anthropic"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.anthropic.messages",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "Input messages."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model that will complete your prompt."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Anthropic `messages` API.\nFor details on the available parameters, see: <https://docs.anthropic.com/en/api/messages>"
            },
            {
              "@type": "PropertyValue",
              "name": "tools",
              "valueType": "Any",
              "description": "An optional list of Pixeltable tools to use for the request."
            },
            {
              "@type": "PropertyValue",
              "name": "tool_choice",
              "valueType": "Any",
              "description": "An optional tool choice configuration."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.anthropic.invoke_tools",
          "name": "pixeltable.functions.anthropic.invoke_tools",
          "identifier": "invoke_tools",
          "description": "Converts an Anthropic response dict to Pixeltable tool invocation format and calls `tools._invoke()`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.anthropic"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/anthropic.py#L251",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/anthropic.py#L251",
          "codeLocation": {
            "startLine": 251,
            "lineCount": 3,
            "relativePath": "pixeltable/pixeltable/functions/anthropic.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tools",
                "required": true,
                "type": "<class 'pixeltable.func.tools.Tools'>"
              },
              {
                "name": "response",
                "required": true,
                "type": "<class 'pixeltable.exprs.expr.Expr'>"
              }
            ],
            "formatted": "(\n    tools: <class 'pixeltable.func.tools.Tools'>,\n    response: <class 'pixeltable.exprs.expr.Expr'>\n)",
            "returns": "<class 'pixeltable.exprs.inline_expr.InlineDict'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.anthropic.invoke_tools",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.huggingface",
      "name": "pixeltable.functions.huggingface",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/huggingface",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.clip",
          "name": "pixeltable.functions.huggingface.clip",
          "identifier": "clip",
          "description": "Computes a CLIP embedding for the specified text or image. `model_id` should be a reference to a pretrained",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.clip",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "text",
              "valueType": "Any",
              "description": "The string to embed."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The pretrained model to use for the embedding."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An array containing the output of the embedding model."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.cross_encoder",
          "name": "pixeltable.functions.huggingface.cross_encoder",
          "identifier": "cross_encoder",
          "description": "Performs predicts on the given sentence pair.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.cross_encoder",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "sentences1",
              "valueType": "Any",
              "description": "The first sentence to be paired."
            },
            {
              "@type": "PropertyValue",
              "name": "sentences2",
              "valueType": "Any",
              "description": "The second sentence to be paired."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The identifier of the cross-encoder model to use."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The similarity score between the inputs."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.cross_encoder_list",
          "name": "pixeltable.functions.huggingface.cross_encoder_list",
          "identifier": "cross_encoder_list",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.cross_encoder_list",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.detr_for_object_detection",
          "name": "pixeltable.functions.huggingface.detr_for_object_detection",
          "identifier": "detr_for_object_detection",
          "description": "Computes DETR object detections for the specified image. `model_id` should be a reference to a pretrained",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.detr_for_object_detection",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "image",
              "valueType": "Any",
              "description": "The image to embed."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The pretrained model to use for object detection."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the output of the object detection model, in the following format:\n\n```python\n{\n    'scores': [0.99, 0.999],  # list of confidence scores for each detected object\n    'labels': [25, 25],  # list of COCO class labels for each detected object\n    'label_text': ['giraffe', 'giraffe'],  # corresponding text names of class labels\n    'boxes': [[51.942, 356.174, 181.481, 413.975], [383.225, 58.66, 605.64, 361.346]]\n        # list of bounding boxes for each detected object, as [x1, y1, x2, y2]\n}\n```"
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.detr_to_coco",
          "name": "pixeltable.functions.huggingface.detr_to_coco",
          "identifier": "detr_to_coco",
          "description": "Converts the output of a DETR object detection model to COCO format.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.detr_to_coco",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "image",
              "valueType": "Any",
              "description": "The image for which detections were computed."
            },
            {
              "@type": "PropertyValue",
              "name": "detr_info",
              "valueType": "Any",
              "description": "The output of a DETR object detection model, as returned by `detr_for_object_detection`."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the data from `detr_info`, converted to COCO format."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.sentence_transformer",
          "name": "pixeltable.functions.huggingface.sentence_transformer",
          "identifier": "sentence_transformer",
          "description": "Computes sentence embeddings. `model_id` should be a pretrained Sentence Transformers model, as described",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.sentence_transformer",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "sentence",
              "valueType": "Any",
              "description": "The sentence to embed."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The pretrained model to use for the encoding."
            },
            {
              "@type": "PropertyValue",
              "name": "normalize_embeddings",
              "valueType": "Any",
              "description": "If `True`, normalizes embeddings to length 1; see the\n[Sentence Transformers API Docs](https://sbert.net/docs/package_reference/sentence_transformer/SentenceTransformer.html)\nfor more details"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An array containing the output of the embedding model."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.sentence_transformer_list",
          "name": "pixeltable.functions.huggingface.sentence_transformer_list",
          "identifier": "sentence_transformer_list",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.sentence_transformer_list",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.speech2text_for_conditional_generation",
          "name": "pixeltable.functions.huggingface.speech2text_for_conditional_generation",
          "identifier": "speech2text_for_conditional_generation",
          "description": "Transcribes or translates speech to text using a Speech2Text model. `model_id` should be a reference to a",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.speech2text_for_conditional_generation",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "audio",
              "valueType": "Any",
              "description": "The audio clip to transcribe or translate."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The pretrained model to use for the transcription or translation."
            },
            {
              "@type": "PropertyValue",
              "name": "language",
              "valueType": "Any",
              "description": "If using a multilingual translation model, the language code to translate to. If not provided,\nthe model's default language will be used. If the model is not translation model, is not a\nmultilingual model, or does not support the specified language, an error will be raised."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The transcribed or translated text."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.huggingface.vit_for_image_classification",
          "name": "pixeltable.functions.huggingface.vit_for_image_classification",
          "identifier": "vit_for_image_classification",
          "description": "Computes image classifications for the specified image using a Vision Transformer (ViT) model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.huggingface"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.huggingface.vit_for_image_classification",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "image",
              "valueType": "Any",
              "description": "The image to classify."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The pretrained model to use for the classification."
            },
            {
              "@type": "PropertyValue",
              "name": "top_k",
              "valueType": "Any",
              "description": "The number of classes to return."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the output of the image classification model, in the following format:\n\n```python\n{\n    'scores': [0.325, 0.198, 0.105],  # list of probabilities of the top-k most likely classes\n    'labels': [340, 353, 386],  # list of class IDs for the top-k most likely classes\n    'label_text': ['zebra', 'gazelle', 'African elephant, Loxodonta africana'],\n        # corresponding text names of the top-k most likely classes\n```"
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.gemini",
      "name": "pixeltable.functions.gemini",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/gemini",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.gemini.generate_content",
          "name": "pixeltable.functions.gemini.generate_content",
          "identifier": "generate_content",
          "description": "Generate content from the specified model. For additional details, see:",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.gemini"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.gemini.generate_content",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "contents",
              "valueType": "Any",
              "description": "The input content to generate from."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the model to use."
            },
            {
              "@type": "PropertyValue",
              "name": "config",
              "valueType": "Any",
              "description": "Configuration for generation, corresponding to keyword arguments of\n`genai.types.GenerateContentConfig`. For details on the parameters, see:\n<https://googleapis.github.io/python-genai/genai.html#module-genai.types>"
            },
            {
              "@type": "PropertyValue",
              "name": "tools",
              "valueType": "Any",
              "description": "An optional list of Pixeltable tools to use. It is also possible to specify tools manually via the\n`config['tools']` parameter, but at most one of `config['tools']` or `tools` may be used."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.gemini.generate_images",
          "name": "pixeltable.functions.gemini.generate_images",
          "identifier": "generate_images",
          "description": "Generates images based on a text description and configuration. For additional details, see:",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.gemini"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.gemini.generate_images",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "A text description of the images to generate."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use."
            },
            {
              "@type": "PropertyValue",
              "name": "config",
              "valueType": "Any",
              "description": "Configuration for generation, corresponding to keyword arguments of\n`genai.types.GenerateImagesConfig`. For details on the parameters, see:\n<https://googleapis.github.io/python-genai/genai.html#module-genai.types>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The generated image."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.gemini.generate_videos",
          "name": "pixeltable.functions.gemini.generate_videos",
          "identifier": "generate_videos",
          "description": "Generates videos based on a text description and configuration. For additional details, see:",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.gemini"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.gemini.generate_videos",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "A text description of the videos to generate."
            },
            {
              "@type": "PropertyValue",
              "name": "image",
              "valueType": "Any",
              "description": "An optional image to use as the first frame of the video. At least one of `prompt` or `image` must be\nprovided. (It is ok to specify both.)"
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use."
            },
            {
              "@type": "PropertyValue",
              "name": "config",
              "valueType": "Any",
              "description": "Configuration for generation, corresponding to keyword arguments of\n`genai.types.GenerateVideosConfig`. For details on the parameters, see:\n<https://googleapis.github.io/python-genai/genai.html#module-genai.types>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The generated video."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.gemini.invoke_tools",
          "name": "pixeltable.functions.gemini.invoke_tools",
          "identifier": "invoke_tools",
          "description": "Converts an OpenAI response dict to Pixeltable tool invocation format and calls `tools._invoke()`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.gemini"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/gemini.py#L100",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/gemini.py#L100",
          "codeLocation": {
            "startLine": 100,
            "lineCount": 3,
            "relativePath": "pixeltable/pixeltable/functions/gemini.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tools",
                "required": true,
                "type": "<class 'pixeltable.func.tools.Tools'>"
              },
              {
                "name": "response",
                "required": true,
                "type": "<class 'pixeltable.exprs.expr.Expr'>"
              }
            ],
            "formatted": "(\n    tools: <class 'pixeltable.func.tools.Tools'>,\n    response: <class 'pixeltable.exprs.expr.Expr'>\n)",
            "returns": "<class 'pixeltable.exprs.inline_expr.InlineDict'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.gemini.invoke_tools",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.bedrock",
      "name": "pixeltable.functions.bedrock",
      "description": "Pixeltable UDFs for AWS Bedrock AI models.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/bedrock",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.bedrock.converse",
          "name": "pixeltable.functions.bedrock.converse",
          "identifier": "converse",
          "description": "Generate a conversation response.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.bedrock"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.bedrock.converse",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "Input messages."
            },
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "The model that will complete your prompt."
            },
            {
              "@type": "PropertyValue",
              "name": "system",
              "valueType": "Any",
              "description": "An optional system prompt."
            },
            {
              "@type": "PropertyValue",
              "name": "inference_config",
              "valueType": "Any",
              "description": "Base inference parameters to use."
            },
            {
              "@type": "PropertyValue",
              "name": "additional_model_request_fields",
              "valueType": "Any",
              "description": "Additional inference parameters to use."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.bedrock.invoke_tools",
          "name": "pixeltable.functions.bedrock.invoke_tools",
          "identifier": "invoke_tools",
          "description": "Converts an Anthropic response dict to Pixeltable tool invocation format and calls `tools._invoke()`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.bedrock"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/bedrock.py#L108",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/bedrock.py#L108",
          "codeLocation": {
            "startLine": 108,
            "lineCount": 3,
            "relativePath": "pixeltable/pixeltable/functions/bedrock.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tools",
                "required": true,
                "type": "<class 'pixeltable.func.tools.Tools'>"
              },
              {
                "name": "response",
                "required": true,
                "type": "<class 'pixeltable.exprs.expr.Expr'>"
              }
            ],
            "formatted": "(\n    tools: <class 'pixeltable.func.tools.Tools'>,\n    response: <class 'pixeltable.exprs.expr.Expr'>\n)",
            "returns": "<class 'pixeltable.exprs.inline_expr.InlineDict'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.bedrock.invoke_tools",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.groq",
      "name": "pixeltable.functions.groq",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/groq",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.groq.chat_completions",
          "name": "pixeltable.functions.groq.chat_completions",
          "identifier": "chat_completions",
          "description": "Chat Completion API.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.groq"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.groq.chat_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "A list of messages comprising the conversation so far."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "ID of the model to use. (See overview here: <https://console.groq.com/docs/models>)"
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Groq `chat/completions` API.\nFor details on the available parameters, see: <https://console.groq.com/docs/api-reference#chat-create>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.groq.invoke_tools",
          "name": "pixeltable.functions.groq.invoke_tools",
          "identifier": "invoke_tools",
          "description": "Converts an OpenAI response dict to Pixeltable tool invocation format and calls `tools._invoke()`.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.groq"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/groq.py#L99",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/groq.py#L99",
          "codeLocation": {
            "startLine": 99,
            "lineCount": 3,
            "relativePath": "pixeltable/pixeltable/functions/groq.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tools",
                "required": true,
                "type": "<class 'pixeltable.func.tools.Tools'>"
              },
              {
                "name": "response",
                "required": true,
                "type": "<class 'pixeltable.exprs.expr.Expr'>"
              }
            ],
            "formatted": "(\n    tools: <class 'pixeltable.func.tools.Tools'>,\n    response: <class 'pixeltable.exprs.expr.Expr'>\n)",
            "returns": "<class 'pixeltable.exprs.inline_expr.InlineDict'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.groq.invoke_tools",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.replicate",
      "name": "pixeltable.functions.replicate",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/replicate",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.replicate.run",
          "name": "pixeltable.functions.replicate.run",
          "identifier": "run",
          "description": "Run a model on Replicate.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.replicate"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.replicate.run",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "The input parameters for the model."
            },
            {
              "@type": "PropertyValue",
              "name": "ref",
              "valueType": "Any",
              "description": "The name of the model to run."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The output of the model."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.together",
      "name": "pixeltable.functions.together",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/together",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.together.completions",
          "name": "pixeltable.functions.together.completions",
          "identifier": "completions",
          "description": "Generate completions based on a given prompt using a specified model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.together"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.together.completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "A string providing context for the model to complete."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the model to query."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword arguments for the Together `completions` API.\nFor details on the available parameters, see: <https://docs.together.ai/reference/completions-1>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.together.chat_completions",
          "name": "pixeltable.functions.together.chat_completions",
          "identifier": "chat_completions",
          "description": "Generate chat completions based on a given prompt using a specified model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.together"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.together.chat_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "A list of messages comprising the conversation so far."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the model to query."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword arguments for the Together `chat/completions` API.\nFor details on the available parameters, see: <https://docs.together.ai/reference/chat-completions-1>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.together.embeddings",
          "name": "pixeltable.functions.together.embeddings",
          "identifier": "embeddings",
          "description": "Query an embedding model for a given string of text.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.together"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.together.embeddings",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "A string providing the text for the model to embed."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the embedding model to use."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An array representing the application of the given embedding to `input`."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.together.image_generations",
          "name": "pixeltable.functions.together.image_generations",
          "identifier": "image_generations",
          "description": "Generate images based on a given prompt using a specified model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.together"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.together.image_generations",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "A description of the desired images."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for image generation."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Together `images/generations` API.\nFor details on the available parameters, see: <https://docs.together.ai/reference/post_images-generations>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The generated image."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.fireworks",
      "name": "pixeltable.functions.fireworks",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/fireworks",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.fireworks.chat_completions",
          "name": "pixeltable.functions.fireworks.chat_completions",
          "identifier": "chat_completions",
          "description": "Creates a model response for the given chat conversation.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.fireworks"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.fireworks.chat_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "A list of messages comprising the conversation so far."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the model to use."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Fireworks `chat_completions` API. For details on the available\nparameters, see: <https://docs.fireworks.ai/api-reference/post-chatcompletions>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.mistralai",
      "name": "pixeltable.functions.mistralai",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/mistralai",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.mistralai.chat_completions",
          "name": "pixeltable.functions.mistralai.chat_completions",
          "identifier": "chat_completions",
          "description": "Chat Completion API.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.mistralai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.mistralai.chat_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "The prompt(s) to generate completions for."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "ID of the model to use. (See overview here: <https://docs.mistral.ai/getting-started/models/>)"
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Mistral `chat/completions` API.\nFor details on the available parameters, see: <https://docs.mistral.ai/api/#tag/chat>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.mistralai.fim_completions",
          "name": "pixeltable.functions.mistralai.fim_completions",
          "identifier": "fim_completions",
          "description": "Fill-in-the-middle Completion API.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.mistralai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.mistralai.fim_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "The text/code to complete."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "ID of the model to use. (See overview here: <https://docs.mistral.ai/getting-started/models/>)"
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Mistral `fim/completions` API.\nFor details on the available parameters, see: <https://docs.mistral.ai/api/#tag/fim>"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.mistralai.embeddings",
          "name": "pixeltable.functions.mistralai.embeddings",
          "identifier": "embeddings",
          "description": "Embeddings API.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.mistralai"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.mistralai.embeddings",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "Text to embed."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "ID of the model to use. (See overview here: <https://docs.mistral.ai/getting-started/models/>)"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An array representing the application of the given embedding to `input`."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.deepseek",
      "name": "pixeltable.functions.deepseek",
      "description": "Pixeltable UDFs for Deepseek AI models.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/deepseek",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.deepseek.chat_completions",
          "name": "pixeltable.functions.deepseek.chat_completions",
          "identifier": "chat_completions",
          "description": "Creates a model response for the given chat conversation.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.deepseek"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.deepseek.chat_completions",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "A list of messages to use for chat completion, as described in the Deepseek API documentation."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model to use for chat completion."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the Deepseek `chat/completions` API.\nFor details on the available parameters, see: <https://api-docs.deepseek.com/api/create-chat-completion>"
            },
            {
              "@type": "PropertyValue",
              "name": "tools",
              "valueType": "Any",
              "description": "An optional list of Pixeltable tools to use for the request."
            },
            {
              "@type": "PropertyValue",
              "name": "tool_choice",
              "valueType": "Any",
              "description": "An optional tool choice configuration."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the response and other metadata."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.ollama",
      "name": "pixeltable.functions.ollama",
      "description": "Pixeltable UDFs for Ollama local models.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/ollama",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.ollama.generate",
          "name": "pixeltable.functions.ollama.generate",
          "identifier": "generate",
          "description": "Generate a response for a given prompt with a provided model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.ollama"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.ollama.generate",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "prompt",
              "valueType": "Any",
              "description": "The prompt to generate a response for."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model name."
            },
            {
              "@type": "PropertyValue",
              "name": "suffix",
              "valueType": "Any",
              "description": "The text after the model response."
            },
            {
              "@type": "PropertyValue",
              "name": "format",
              "valueType": "Any",
              "description": "The format of the response; must be one of `'json'` or `None`."
            },
            {
              "@type": "PropertyValue",
              "name": "system",
              "valueType": "Any",
              "description": "System message."
            },
            {
              "@type": "PropertyValue",
              "name": "template",
              "valueType": "Any",
              "description": "Prompt template to use."
            },
            {
              "@type": "PropertyValue",
              "name": "context",
              "valueType": "Any",
              "description": "The context parameter returned from a previous call to `generate()`."
            },
            {
              "@type": "PropertyValue",
              "name": "raw",
              "valueType": "Any",
              "description": "If `True`, no formatting will be applied to the prompt."
            },
            {
              "@type": "PropertyValue",
              "name": "options",
              "valueType": "Any",
              "description": "Additional options for the Ollama `chat` call, such as `max_tokens`, `temperature`, `top_p`, and\n`top_k`. For details, see the\n[Valid Parameters and Values](https://github.com/ollama/ollama/blob/main/docs/modelfile.md#valid-parameters-and-values)\nsection of the Ollama documentation."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.ollama.chat",
          "name": "pixeltable.functions.ollama.chat",
          "identifier": "chat",
          "description": "Generate the next message in a chat with a provided model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.ollama"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.ollama.chat",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "The messages of the chat."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model name."
            },
            {
              "@type": "PropertyValue",
              "name": "tools",
              "valueType": "Any",
              "description": "Tools for the model to use."
            },
            {
              "@type": "PropertyValue",
              "name": "format",
              "valueType": "Any",
              "description": "The format of the response; must be one of `'json'` or `None`."
            },
            {
              "@type": "PropertyValue",
              "name": "options",
              "valueType": "Any",
              "description": "Additional options to pass to the `chat` call, such as `max_tokens`, `temperature`, `top_p`, and\n`top_k`. For details, see the\n[Valid Parameters and Values](https://github.com/ollama/ollama/blob/main/docs/modelfile.md#valid-parameters-and-values)\nsection of the Ollama documentation."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.ollama.embed",
          "name": "pixeltable.functions.ollama.embed",
          "identifier": "embed",
          "description": "Generate embeddings from a model.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.ollama"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.ollama.embed",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "input",
              "valueType": "Any",
              "description": "The input text to generate embeddings for."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The model name."
            },
            {
              "@type": "PropertyValue",
              "name": "truncate",
              "valueType": "Any",
              "description": "Truncates the end of each input to fit within context length.\nReturns error if false and context length is exceeded."
            },
            {
              "@type": "PropertyValue",
              "name": "options",
              "valueType": "Any",
              "description": "Additional options to pass to the `embed` call.\nFor details, see the\n[Valid Parameters and Values](https://github.com/ollama/ollama/blob/main/docs/modelfile.md#valid-parameters-and-values)\nsection of the Ollama documentation."
            }
          ]
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.llama_cpp",
      "name": "pixeltable.functions.llama_cpp",
      "description": "Pixeltable UDFs for llama.cpp models.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/llama_cpp",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.llama_cpp.create_chat_completion",
          "name": "pixeltable.functions.llama_cpp.create_chat_completion",
          "identifier": "create_chat_completion",
          "description": "Generate a chat completion from a list of messages.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.llama_cpp"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.llama_cpp.create_chat_completion",
              "httpMethod": "GET"
            }
          },
          "category": "initialization",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "messages",
              "valueType": "Any",
              "description": "A list of messages to generate a response for."
            },
            {
              "@type": "PropertyValue",
              "name": "model_path",
              "valueType": "Any",
              "description": "Path to the model (if using a local model)."
            },
            {
              "@type": "PropertyValue",
              "name": "repo_id",
              "valueType": "Any",
              "description": "The Hugging Face model repo id (if using a pretrained model)."
            },
            {
              "@type": "PropertyValue",
              "name": "repo_filename",
              "valueType": "Any",
              "description": "A filename or glob pattern to match the model file in the repo (optional, if using a\npretrained model)."
            },
            {
              "@type": "PropertyValue",
              "name": "model_kwargs",
              "valueType": "Any",
              "description": "Additional keyword args for the llama_cpp `create_chat_completions` API, such as `max_tokens`,\n`temperature`, `top_p`, and `top_k`. For details, see the\n[llama_cpp create_chat_completions documentation](https://llama-cpp-python.readthedocs.io/en/latest/api-reference/#llama_cpp.Llama.create_chat_completion)."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.llama_cpp.cleanup",
          "name": "pixeltable.functions.llama_cpp.cleanup",
          "identifier": "cleanup",
          "description": "",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.llama_cpp"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/llama_cpp.py#L107",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/functions/llama_cpp.py#L107",
          "codeLocation": {
            "startLine": 107,
            "lineCount": 6,
            "relativePath": "pixeltable/pixeltable/functions/llama_cpp.py"
          },
          "signature": {
            "parameters": [],
            "formatted": "()",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.llama_cpp.cleanup",
              "httpMethod": "GET"
            }
          },
          "category": "utility"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.whisper",
      "name": "pixeltable.functions.whisper",
      "description": "Pixeltable [UDF](https://pixeltable.readme.io/docs/user-defined-functions-udfs)",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/whisper",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.whisper.transcribe",
          "name": "pixeltable.functions.whisper.transcribe",
          "identifier": "transcribe",
          "description": "Transcribe an audio file using Whisper.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.whisper"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.whisper.transcribe",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "audio",
              "valueType": "Any",
              "description": "The audio file to transcribe."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the model to use for transcription."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the transcription and various other metadata."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.vision",
      "name": "pixeltable.functions.vision",
      "description": "Pixeltable [UDFs](https://pixeltable.readme.io/docs/user-defined-functions-udfs) for Computer Vision.",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/vision",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.vision.eval_detections",
          "name": "pixeltable.functions.vision.eval_detections",
          "identifier": "eval_detections",
          "description": "Evaluates the performance of a set of predicted bounding boxes against a set of ground truth bounding boxes.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.vision"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.vision.eval_detections",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "pred_bboxes",
              "valueType": "Any",
              "description": "List of predicted bounding boxes, each represented as [xmin, ymin, xmax, ymax]."
            },
            {
              "@type": "PropertyValue",
              "name": "pred_labels",
              "valueType": "Any",
              "description": "List of predicted labels."
            },
            {
              "@type": "PropertyValue",
              "name": "pred_scores",
              "valueType": "Any",
              "description": "List of predicted scores."
            },
            {
              "@type": "PropertyValue",
              "name": "gt_bboxes",
              "valueType": "Any",
              "description": "List of ground truth bounding boxes, each represented as [xmin, ymin, xmax, ymax]."
            },
            {
              "@type": "PropertyValue",
              "name": "gt_labels",
              "valueType": "Any",
              "description": "List of ground truth labels."
            },
            {
              "@type": "PropertyValue",
              "name": "min_iou",
              "valueType": "Any",
              "description": "Minimum intersection-over-union (IoU) threshold for a predicted bounding box to be\nconsidered a true positive."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A list of dictionaries, one per label class, with the following structure:\n```python\n{\n    'min_iou': float,  # The value of `min_iou` used for the detections\n    'class': int,  # The label class\n    'tp': list[int],  # List of 1's and 0's indicating true positives for each\n                      # predicted bounding box of this class\n    'fp': list[int],  # List of 1's and 0's indicating false positives for each\n                      # predicted bounding box of this class; `fp[n] == 1 - tp[n]`\n    'scores': list[float],  # List of predicted scores for each bounding box of this class\n    'num_gts': int,  # Number of ground truth bounding boxes of this class\n}\n```"
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.vision.draw_bounding_boxes",
          "name": "pixeltable.functions.vision.draw_bounding_boxes",
          "identifier": "draw_bounding_boxes",
          "description": "Draws bounding boxes on the given image.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.vision"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.vision.draw_bounding_boxes",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "img",
              "valueType": "Any",
              "description": "The image on which to draw the bounding boxes."
            },
            {
              "@type": "PropertyValue",
              "name": "boxes",
              "valueType": "Any",
              "description": "List of bounding boxes, each represented as [xmin, ymin, xmax, ymax]."
            },
            {
              "@type": "PropertyValue",
              "name": "labels",
              "valueType": "Any",
              "description": "List of labels for each bounding box."
            },
            {
              "@type": "PropertyValue",
              "name": "color",
              "valueType": "Any",
              "description": "Single color to be used for all bounding boxes and labels."
            },
            {
              "@type": "PropertyValue",
              "name": "box_colors",
              "valueType": "Any",
              "description": "List of colors, one per bounding box."
            },
            {
              "@type": "PropertyValue",
              "name": "fill",
              "valueType": "Any",
              "description": "Whether to fill the bounding boxes with color."
            },
            {
              "@type": "PropertyValue",
              "name": "width",
              "valueType": "Any",
              "description": "Width of the bounding box borders."
            },
            {
              "@type": "PropertyValue",
              "name": "font",
              "valueType": "Any",
              "description": "Name of a system font or path to a TrueType font file, as required by\n[`PIL.ImageFont.truetype()`](https://pillow.readthedocs.io/en/stable/reference/ImageFont.html#PIL.ImageFont.truetype).\nIf `None`, uses the default provided by\n[`PIL.ImageFont.load_default()`](https://pillow.readthedocs.io/en/stable/reference/ImageFont.html#PIL.ImageFont.load_default)."
            },
            {
              "@type": "PropertyValue",
              "name": "font_size",
              "valueType": "Any",
              "description": "Size of the font used for labels in points. Only used in conjunction with non-`None` `font` argument."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "The image with bounding boxes drawn on it."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.yolox",
      "name": "pixeltable.functions.yolox",
      "description": "",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/yolox",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.yolox.yolo_to_coco",
          "name": "pixeltable.functions.yolox.yolo_to_coco",
          "identifier": "yolo_to_coco",
          "description": "Converts the output of a YOLOX object detection model to COCO format.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.yolox"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.yolox.yolo_to_coco",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "detections",
              "valueType": "Any",
              "description": "The output of a YOLOX object detection model, as returned by `yolox`."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the data from `detections`, converted to COCO format."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.yolox.yolox",
          "name": "pixeltable.functions.yolox.yolox",
          "identifier": "yolox",
          "description": "Computes YOLOX object detections for the specified image. `model_id` should reference one of the models",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.yolox"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.yolox.yolox",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "model_id",
              "valueType": "Any",
              "description": "one of: `yolox_nano`, `yolox_tiny`, `yolox_s`, `yolox_m`, `yolox_l`, `yolox_x`"
            },
            {
              "@type": "PropertyValue",
              "name": "threshold",
              "valueType": "Any",
              "description": "the threshold for object detection"
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the output of the object detection model."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.functions.whisperx",
      "name": "pixeltable.functions.whisperx",
      "description": "",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/functions/whisperx",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.functions.whisperx.transcribe",
          "name": "pixeltable.functions.whisperx.transcribe",
          "identifier": "transcribe",
          "description": "Transcribe an audio file using WhisperX.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.functions.whisperx"
          },
          "signature": {
            "parameters": [
              {
                "name": "args",
                "required": true,
                "type": "Any"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    args: Any,\n    kwargs: Any\n)",
            "returns": "'exprs.FunctionCall'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.functions.whisperx.transcribe",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "audio",
              "valueType": "Any",
              "description": "The audio file to transcribe."
            },
            {
              "@type": "PropertyValue",
              "name": "model",
              "valueType": "Any",
              "description": "The name of the model to use for transcription."
            },
            {
              "@type": "PropertyValue",
              "name": "diarize",
              "valueType": "Any",
              "description": "Whether to perform speaker diarization."
            },
            {
              "@type": "PropertyValue",
              "name": "compute_type",
              "valueType": "Any",
              "description": "The compute type to use for the model (e.g., `'int8'`, `'float16'`). If `None`,\ndefaults to `'float16'` on CUDA devices and `'int8'` otherwise."
            },
            {
              "@type": "PropertyValue",
              "name": "language",
              "valueType": "Any",
              "description": "The language code for the transcription (e.g., `'en'` for English)."
            },
            {
              "@type": "PropertyValue",
              "name": "task",
              "valueType": "Any",
              "description": "The task to perform (e.g., `'transcribe'` or `'translate'`). Defaults to `'transcribe'`."
            },
            {
              "@type": "PropertyValue",
              "name": "chunk_size",
              "valueType": "Any",
              "description": "The size of the audio chunks to process, in seconds. Defaults to `30`."
            },
            {
              "@type": "PropertyValue",
              "name": "alignment_model_name",
              "valueType": "Any",
              "description": "The name of the alignment model to use. If `None`, uses the default model for the given\nlanguage. Only valid if `diarize=True`."
            },
            {
              "@type": "PropertyValue",
              "name": "interpolate_method",
              "valueType": "Any",
              "description": "The method to use for interpolation of the alignment results. If not specified, uses the\nWhisperX default (`'nearest'`). Only valid if `diarize=True`."
            },
            {
              "@type": "PropertyValue",
              "name": "return_char_alignments",
              "valueType": "Any",
              "description": "Whether to return character-level alignments. Defaults to `False`.\nOnly valid if `diarize=True`."
            },
            {
              "@type": "PropertyValue",
              "name": "diarization_model_name",
              "valueType": "Any",
              "description": "The name of the diarization model to use. Defaults to\n`pyannote/speaker-diarization-3.1`. Only valid if `diarize=True`."
            },
            {
              "@type": "PropertyValue",
              "name": "num_speakers",
              "valueType": "Any",
              "description": "The number of speakers to expect in the audio. By default, the model with try to detect the\nnumber of speakers. Only valid if `diarize=True`."
            },
            {
              "@type": "PropertyValue",
              "name": "min_speakers",
              "valueType": "Any",
              "description": "If specified, the minimum number of speakers to expect in the audio.\nOnly valid if `diarize=True`."
            },
            {
              "@type": "PropertyValue",
              "name": "max_speakers",
              "valueType": "Any",
              "description": "If specified, the maximum number of speakers to expect in the audio.\nOnly valid if `diarize=True`."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A dictionary containing the audio transcription, diarization (if enabled), and various other metadata."
          }
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.iterators",
      "name": "pixeltable.iterators",
      "description": "",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.AudioSplitter",
          "name": "AudioSplitter",
          "description": "Iterator over chunks of an audio file. The audio file is split into smaller chunks,",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/AudioSplitter"
        },
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.ComponentIterator",
          "name": "ComponentIterator",
          "description": "Base class for Pixeltable iterators.",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/ComponentIterator"
        },
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.DocumentSplitter",
          "name": "DocumentSplitter",
          "description": "Iterator over chunks of a document. The document is chunked according to the specified `separators`.",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/DocumentSplitter"
        },
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.FrameIterator",
          "name": "FrameIterator",
          "description": "Iterator over frames of a video. At most one of `fps` or `num_frames` may be specified. If `fps` is specified,",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/FrameIterator"
        },
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.StringSplitter",
          "name": "StringSplitter",
          "description": "Base class for Pixeltable iterators.",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/StringSplitter"
        },
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.TileIterator",
          "name": "TileIterator",
          "description": "Iterator over tiles of an image. Each image will be divided into tiles of size `tile_size`, and the tiles will be",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/TileIterator"
        },
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.iterators.VideoSplitter",
          "name": "VideoSplitter",
          "description": "Iterator over segments of a video file, which is split into fixed-size segments of length `segment_duration`",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/iterators/VideoSplitter"
        }
      ]
    },
    {
      "@type": "SoftwareSourceCode",
      "@id": "pxt:pixeltable.io",
      "name": "pixeltable.io",
      "description": "",
      "programmingLanguage": "Python",
      "url": "https://docs.pixeltable.com/sdk/main/pixeltable/io",
      "codeRepository": "https://github.com/pixeltable/pixeltable/tree/main",
      "hasPart": [
        {
          "@type": "Class",
          "@id": "pxt:pixeltable.io.ExternalStore",
          "name": "ExternalStore",
          "description": "Abstract base class that represents an external data store that is linked to a Pixeltable",
          "url": "https://docs.pixeltable.com/sdk/main/pixeltable/io/ExternalStore"
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.create_label_studio_project",
          "name": "pixeltable.io.create_label_studio_project",
          "identifier": "create_label_studio_project",
          "description": "Create a new Label Studio project and link it to the specified [`Table`][pixeltable.Table].",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/globals.py#L15",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/globals.py#L15",
          "codeLocation": {
            "startLine": 15,
            "lineCount": 126,
            "relativePath": "pixeltable/pixeltable/io/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "t",
                "required": true,
                "type": "Table"
              },
              {
                "name": "label_config",
                "required": true,
                "type": "str"
              },
              {
                "name": "name",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "title",
                "required": false,
                "type": "Optional[str]",
                "default": "None"
              },
              {
                "name": "media_import_method",
                "required": false,
                "type": "Literal['post', 'file', 'url']",
                "default": "post"
              },
              {
                "name": "col_mapping",
                "required": false,
                "type": "Optional[dict[str, str]]",
                "default": "None"
              },
              {
                "name": "sync_immediately",
                "required": false,
                "type": "bool",
                "default": "True"
              },
              {
                "name": "s3_configuration",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    t: Table,\n    label_config: str,\n    name: Optional[str] = None,\n    title: Optional[str] = None,\n    media_import_method: Literal['post', 'file', 'url'] = 'post',\n    col_mapping: Optional[dict[str, str]] = None,\n    sync_immediately: bool = True,\n    s3_configuration: Optional[dict[str, Any]] = None,\n    kwargs: Any\n)",
            "returns": "UpdateStatus"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.create_label_studio_project",
              "httpMethod": "GET"
            }
          },
          "category": "initialization",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "t",
              "valueType": "Any",
              "description": "The table to link to."
            },
            {
              "@type": "PropertyValue",
              "name": "label_config",
              "valueType": "Any",
              "description": "The Label Studio project configuration, in XML format."
            },
            {
              "@type": "PropertyValue",
              "name": "name",
              "valueType": "Any",
              "description": "An optional name for the new project in Pixeltable. If specified, must be a valid\nPixeltable identifier and must not be the name of any other external data store\nlinked to `t`. If not specified, a default name will be used of the form\n`ls_project_0`, `ls_project_1`, etc."
            },
            {
              "@type": "PropertyValue",
              "name": "title",
              "valueType": "Any",
              "description": "An optional title for the Label Studio project. This is the title that annotators\nwill see inside Label Studio. Unlike `name`, it does not need to be an identifier and\ndoes not need to be unique. If not specified, the table name `t.name` will be used."
            },
            {
              "@type": "PropertyValue",
              "name": "media_import_method",
              "valueType": "Any",
              "description": "The method to use when transferring media files to Label Studio:\n- `post`: Media will be sent to Label Studio via HTTP post. This should generally only be used for\n    prototyping; due to restrictions in Label Studio, it can only be used with projects that have\n    just one data field, and does not scale well.\n- `file`: Media will be sent to Label Studio as a file on the local filesystem. This method can be\n    used if Pixeltable and Label Studio are running on the same host.\n- `url`: Media will be sent to Label Studio as externally accessible URLs. This method cannot be\n    used with local media files or with media generated by computed columns.\nThe default is `post`."
            },
            {
              "@type": "PropertyValue",
              "name": "col_mapping",
              "valueType": "Any",
              "description": "An optional mapping of local column names to Label Studio fields."
            },
            {
              "@type": "PropertyValue",
              "name": "sync_immediately",
              "valueType": "Any",
              "description": "If `True`, immediately perform an initial synchronization by\nexporting all rows of the table as Label Studio tasks."
            },
            {
              "@type": "PropertyValue",
              "name": "s3_configuration",
              "valueType": "Any",
              "description": "If specified, S3 import storage will be configured for the new project. This can only\nbe used with `media_import_method='url'`, and if `media_import_method='url'` and any of the media data is\nreferenced by `s3://` URLs, then it must be specified in order for such media to display correctly\nin the Label Studio interface.\n\nThe items in the `s3_configuration` dictionary correspond to kwarg\nparameters of the Label Studio `connect_s3_import_storage` method, as described in the\n[Label Studio connect_s3_import_storage docs](https://labelstud.io/sdk/project.html#label_studio_sdk.project.Project.connect_s3_import_storage).\n`bucket` must be specified; all other parameters are optional. If credentials are not specified explicitly,\nPixeltable will attempt to retrieve them from the environment (such as from `~/.aws/credentials`).\nIf a title is not specified, Pixeltable will use the default `'Pixeltable-S3-Import-Storage'`.\nAll other parameters use their Label Studio defaults."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Additional keyword arguments are passed to the `start_project` method in the Label\nStudio SDK, as described in the\n[Label Studio start_project docs](https://labelstud.io/sdk/project.html#label_studio_sdk.project.Project.start_project)."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "An `UpdateStatus` representing the status of any synchronization operations that occurred."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.export_images_as_fo_dataset",
          "name": "pixeltable.io.export_images_as_fo_dataset",
          "identifier": "export_images_as_fo_dataset",
          "description": "Export images from a Pixeltable table as a Voxel51 dataset. The data must consist of a single column",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/globals.py#L143",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/globals.py#L143",
          "codeLocation": {
            "startLine": 143,
            "lineCount": 86,
            "relativePath": "pixeltable/pixeltable/io/globals.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tbl",
                "required": true,
                "type": "pxt.Table"
              },
              {
                "name": "images",
                "required": true,
                "type": "exprs.Expr"
              },
              {
                "name": "image_format",
                "required": false,
                "type": "str",
                "default": "webp"
              },
              {
                "name": "classifications",
                "required": false,
                "type": "exprs.Expr | list[exprs.Expr] | dict[str, exprs.Expr] | None",
                "default": "None"
              },
              {
                "name": "detections",
                "required": false,
                "type": "exprs.Expr | list[exprs.Expr] | dict[str, exprs.Expr] | None",
                "default": "None"
              }
            ],
            "formatted": "(\n    tbl: pxt.Table,\n    images: exprs.Expr,\n    image_format: str = 'webp',\n    classifications: exprs.Expr | list[exprs.Expr] | dict[str, exprs.Expr] | None = None,\n    detections: exprs.Expr | list[exprs.Expr] | dict[str, exprs.Expr] | None = None\n)",
            "returns": "'fo.Dataset'"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.export_images_as_fo_dataset",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "tbl",
              "valueType": "Any",
              "description": "The table from which to export data."
            },
            {
              "@type": "PropertyValue",
              "name": "images",
              "valueType": "Any",
              "description": "A column or expression that contains the images to export."
            },
            {
              "@type": "PropertyValue",
              "name": "image_format",
              "valueType": "Any",
              "description": "The format to use when writing out images for export."
            },
            {
              "@type": "PropertyValue",
              "name": "classifications",
              "valueType": "Any",
              "description": "Optional image classification labels. If a single `Expr` is provided, it must be a table\ncolumn or an expression that evaluates to a list of dictionaries. Each dictionary in the list corresponds\nto an image class and must have the following structure:\n\n```python\n{'label': 'zebra', 'confidence': 0.325}\n```\n\nIf multiple `Expr`s are provided, each one must evaluate to a list of such dictionaries."
            },
            {
              "@type": "PropertyValue",
              "name": "detections",
              "valueType": "Any",
              "description": "Optional image detection labels. If a single `Expr` is provided, it must be a table column or an\nexpression that evaluates to a list of dictionaries. Each dictionary in the list corresponds to an image\ndetection, and must have the following structure:\n\n```python\n{\n    'label': 'giraffe',\n    'confidence': 0.99,\n    'bounding_box': [0.081, 0.836, 0.202, 0.136]  # [x, y, w, h], fractional coordinates\n}\n```\n\nIf multiple `Expr`s are provided, each one must evaluate to a list of such dictionaries."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A Voxel51 dataset."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.export_lancedb",
          "name": "pixeltable.io.export_lancedb",
          "identifier": "export_lancedb",
          "description": "Exports a dataframe's data to a LanceDB table.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/utils/lancedb.py#L16",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/utils/lancedb.py#L16",
          "codeLocation": {
            "startLine": 16,
            "lineCount": 73,
            "relativePath": "pixeltable/pixeltable/utils/lancedb.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "table_or_df",
                "required": true,
                "type": "pxt.Table | pxt.DataFrame"
              },
              {
                "name": "db_uri",
                "required": true,
                "type": "Path"
              },
              {
                "name": "table_name",
                "required": true,
                "type": "str"
              },
              {
                "name": "batch_size_bytes",
                "required": false,
                "type": "int",
                "default": "134217728"
              },
              {
                "name": "if_exists",
                "required": false,
                "type": "Literal['error', 'overwrite', 'append']",
                "default": "error"
              }
            ],
            "formatted": "(\n    table_or_df: pxt.Table | pxt.DataFrame,\n    db_uri: Path,\n    table_name: str,\n    batch_size_bytes: int = 134217728,\n    if_exists: Literal['error', 'overwrite', 'append'] = 'error'\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.export_lancedb",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "table_or_df ",
              "valueType": "Any",
              "description": "Table or Dataframe to export."
            },
            {
              "@type": "PropertyValue",
              "name": "db_uri",
              "valueType": "Any",
              "description": "Local Path to the LanceDB database."
            },
            {
              "@type": "PropertyValue",
              "name": "table_name ",
              "valueType": "Any",
              "description": "Name of the table in the LanceDB database."
            },
            {
              "@type": "PropertyValue",
              "name": "batch_size_bytes ",
              "valueType": "Any",
              "description": "Maximum size in bytes for each batch."
            },
            {
              "@type": "PropertyValue",
              "name": "if_exists",
              "valueType": "Any",
              "description": "Determines the behavior if the table already exists. Must be one of the following:\n- `'error'`: raise an error\n- `'overwrite'`: overwrite the existing table\n- `'append'`: append to the existing table"
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.export_parquet",
          "name": "pixeltable.io.export_parquet",
          "identifier": "export_parquet",
          "description": "Exports a dataframe's data to one or more Parquet files. Requires pyarrow to be installed.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/parquet.py#L20",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/parquet.py#L20",
          "codeLocation": {
            "startLine": 20,
            "lineCount": 48,
            "relativePath": "pixeltable/pixeltable/io/parquet.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "table_or_df",
                "required": true,
                "type": "pxt.Table | pxt.DataFrame"
              },
              {
                "name": "parquet_path",
                "required": true,
                "type": "Path"
              },
              {
                "name": "partition_size_bytes",
                "required": false,
                "type": "int",
                "default": "100000000"
              },
              {
                "name": "inline_images",
                "required": false,
                "type": "bool",
                "default": "False"
              }
            ],
            "formatted": "(\n    table_or_df: pxt.Table | pxt.DataFrame,\n    parquet_path: Path,\n    partition_size_bytes: int = 100000000,\n    inline_images: bool = False\n)",
            "returns": "None"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.export_parquet",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "table_or_df ",
              "valueType": "Any",
              "description": "Table or Dataframe to export."
            },
            {
              "@type": "PropertyValue",
              "name": "parquet_path ",
              "valueType": "Any",
              "description": "Path to directory to write the parquet files to."
            },
            {
              "@type": "PropertyValue",
              "name": "partition_size_bytes ",
              "valueType": "Any",
              "description": "The maximum target size for each chunk. Default 100_000_000 bytes."
            },
            {
              "@type": "PropertyValue",
              "name": "inline_images ",
              "valueType": "Any",
              "description": "If True, images are stored inline in the parquet file. This is useful\nfor small images, to be imported as pytorch dataset. But can be inefficient\nfor large images, and cannot be imported into pixeltable.\nIf False, will raise an error if the Dataframe has any image column.\nDefault False."
            }
          ]
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_csv",
          "name": "pixeltable.io.import_csv",
          "identifier": "import_csv",
          "description": "Creates a new base table from a csv file. This is a convenience method and is equivalent",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/pandas.py#L56",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/pandas.py#L56",
          "codeLocation": {
            "startLine": 56,
            "lineCount": 27,
            "relativePath": "pixeltable/pixeltable/io/pandas.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tbl_name",
                "required": true,
                "type": "<class 'str'>"
              },
              {
                "name": "filepath_or_buffer",
                "required": true,
                "type": "str | os.PathLike"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "typing.Optional[dict[str, typing.Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "<class 'int'>",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "<class 'str'>",
                "default": ""
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "typing.Any"
              }
            ],
            "formatted": "(\n    tbl_name: <class 'str'>,\n    filepath_or_buffer: str | os.PathLike,\n    schema_overrides: typing.Optional[dict[str, typing.Any]] = None,\n    primary_key: str | list[str] | None = None,\n    num_retained_versions: <class 'int'> = 10,\n    comment: <class 'str'> = '',\n    kwargs: typing.Any\n)",
            "returns": "<class 'pixeltable.catalog.table.Table'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_csv",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created [`Table`][pixeltable.Table]."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_excel",
          "name": "pixeltable.io.import_excel",
          "identifier": "import_excel",
          "description": "Creates a new base table from an Excel (.xlsx) file. This is a convenience method and is",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/pandas.py#L85",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/pandas.py#L85",
          "codeLocation": {
            "startLine": 85,
            "lineCount": 28,
            "relativePath": "pixeltable/pixeltable/io/pandas.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tbl_name",
                "required": true,
                "type": "<class 'str'>"
              },
              {
                "name": "io",
                "required": true,
                "type": "str | os.PathLike"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "typing.Optional[dict[str, typing.Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "<class 'int'>",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "<class 'str'>",
                "default": ""
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "typing.Any"
              }
            ],
            "formatted": "(\n    tbl_name: <class 'str'>,\n    io: str | os.PathLike,\n    schema_overrides: typing.Optional[dict[str, typing.Any]] = None,\n    primary_key: str | list[str] | None = None,\n    num_retained_versions: <class 'int'> = 10,\n    comment: <class 'str'> = '',\n    kwargs: typing.Any\n)",
            "returns": "<class 'pixeltable.catalog.table.Table'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_excel",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created [`Table`][pixeltable.Table]."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_huggingface_dataset",
          "name": "pixeltable.io.import_huggingface_dataset",
          "identifier": "import_huggingface_dataset",
          "description": "Create a new base table from a Huggingface dataset, or dataset dict with multiple splits.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/hf_datasets.py#L92",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/hf_datasets.py#L92",
          "codeLocation": {
            "startLine": 92,
            "lineCount": 31,
            "relativePath": "pixeltable/pixeltable/io/hf_datasets.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "table_path",
                "required": true,
                "type": "str"
              },
              {
                "name": "dataset",
                "required": true,
                "type": "datasets.Dataset | datasets.DatasetDict"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    table_path: str,\n    dataset: datasets.Dataset | datasets.DatasetDict,\n    schema_overrides: Optional[dict[str, Any]] = None,\n    primary_key: str | list[str] | None = None,\n    kwargs: Any\n)",
            "returns": "pxt.Table"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_huggingface_dataset",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "table_path",
              "valueType": "Any",
              "description": "Path to the table."
            },
            {
              "@type": "PropertyValue",
              "name": "dataset",
              "valueType": "Any",
              "description": "Huggingface [`datasets.Dataset`](https://huggingface.co/docs/datasets/en/package_reference/main_classes#datasets.Dataset)\nor [`datasets.DatasetDict`](https://huggingface.co/docs/datasets/en/package_reference/main_classes#datasets.DatasetDict)\nto insert into the table."
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "If specified, then for each (name, type) pair in `schema_overrides`, the column with\nname `name` will be given type `type`, instead of being inferred from the `Dataset` or `DatasetDict`.\nThe keys in `schema_overrides` should be the column names of the `Dataset` or `DatasetDict` (whether or not\nthey are valid Pixeltable identifiers)."
            },
            {
              "@type": "PropertyValue",
              "name": "primary_key",
              "valueType": "Any",
              "description": "The primary key of the table (see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Additional arguments to pass to `create_table`.\nAn argument of `column_name_for_split` must be provided if the source is a DatasetDict.\nThis column name will contain the split information. If None, no split information will be stored."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created [`Table`][pixeltable.Table]."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_json",
          "name": "pixeltable.io.import_json",
          "identifier": "import_json",
          "description": "Creates a new base table from a JSON file. This is a convenience method and is",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/datarows.py#L103",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/datarows.py#L103",
          "codeLocation": {
            "startLine": 103,
            "lineCount": 38,
            "relativePath": "pixeltable/pixeltable/io/datarows.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tbl_path",
                "required": true,
                "type": "str"
              },
              {
                "name": "filepath_or_url",
                "required": true,
                "type": "str"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "int",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "str",
                "default": ""
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    tbl_path: str,\n    filepath_or_url: str,\n    schema_overrides: Optional[dict[str, Any]] = None,\n    primary_key: str | list[str] | None = None,\n    num_retained_versions: int = 10,\n    comment: str = '',\n    kwargs: Any\n)",
            "returns": "pxt.Table"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_json",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "tbl_path",
              "valueType": "Any",
              "description": "The name of the table to create."
            },
            {
              "@type": "PropertyValue",
              "name": "filepath_or_url",
              "valueType": "Any",
              "description": "The path or URL of the JSON file."
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "If specified, then columns in `schema_overrides` will be given the specified types\n(see [`import_rows()`][pixeltable.io.import_rows])."
            },
            {
              "@type": "PropertyValue",
              "name": "primary_key",
              "valueType": "Any",
              "description": "The primary key of the table (see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "num_retained_versions",
              "valueType": "Any",
              "description": "The number of retained versions of the table\n(see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "comment",
              "valueType": "Any",
              "description": "A comment to attach to the table (see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Additional keyword arguments to pass to `json.loads`."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created [`Table`][pixeltable.Table]."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_pandas",
          "name": "pixeltable.io.import_pandas",
          "identifier": "import_pandas",
          "description": "Creates a new base table from a Pandas",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/pandas.py#L15",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/pandas.py#L15",
          "codeLocation": {
            "startLine": 15,
            "lineCount": 39,
            "relativePath": "pixeltable/pixeltable/io/pandas.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tbl_name",
                "required": true,
                "type": "<class 'str'>"
              },
              {
                "name": "df",
                "required": true,
                "type": "<class 'pandas.core.frame.DataFrame'>"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "typing.Optional[dict[str, typing.Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "<class 'int'>",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "<class 'str'>",
                "default": ""
              }
            ],
            "formatted": "(\n    tbl_name: <class 'str'>,\n    df: <class 'pandas.core.frame.DataFrame'>,\n    schema_overrides: typing.Optional[dict[str, typing.Any]] = None,\n    primary_key: str | list[str] | None = None,\n    num_retained_versions: <class 'int'> = 10,\n    comment: <class 'str'> = ''\n)",
            "returns": "<class 'pixeltable.catalog.table.Table'>"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_pandas",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "tbl_name",
              "valueType": "Any",
              "description": "The name of the table to create."
            },
            {
              "@type": "PropertyValue",
              "name": "df",
              "valueType": "Any",
              "description": "The Pandas `DataFrame`."
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "If specified, then for each (name, type) pair in `schema_overrides`, the column with\nname `name` will be given type `type`, instead of being inferred from the `DataFrame`. The keys in\n`schema_overrides` should be the column names of the `DataFrame` (whether or not they are valid\nPixeltable identifiers)."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created [`Table`][pixeltable.Table]."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_parquet",
          "name": "pixeltable.io.import_parquet",
          "identifier": "import_parquet",
          "description": "Creates a new base table from a Parquet file or set of files. Requires pyarrow to be installed.",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/parquet.py#L70",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/parquet.py#L70",
          "codeLocation": {
            "startLine": 70,
            "lineCount": 32,
            "relativePath": "pixeltable/pixeltable/io/parquet.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "table",
                "required": true,
                "type": "str"
              },
              {
                "name": "parquet_path",
                "required": true,
                "type": "str"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "kwargs",
                "required": true,
                "type": "Any"
              }
            ],
            "formatted": "(\n    table: str,\n    parquet_path: str,\n    schema_overrides: Optional[dict[str, Any]] = None,\n    primary_key: str | list[str] | None = None,\n    kwargs: Any\n)",
            "returns": "pxt.Table"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_parquet",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "table",
              "valueType": "Any",
              "description": "Fully qualified name of the table to import the data into."
            },
            {
              "@type": "PropertyValue",
              "name": "parquet_path",
              "valueType": "Any",
              "description": "Path to an individual Parquet file or directory of Parquet files."
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "If specified, then for each (name, type) pair in `schema_overrides`, the column with\nname `name` will be given type `type`, instead of being inferred from the Parquet dataset. The keys in\n`schema_overrides` should be the column names of the Parquet dataset (whether or not they are valid\nPixeltable identifiers)."
            },
            {
              "@type": "PropertyValue",
              "name": "primary_key",
              "valueType": "Any",
              "description": "The primary key of the table (see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "kwargs",
              "valueType": "Any",
              "description": "Additional arguments to pass to `create_table`."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created table."
          }
        },
        {
          "@type": "Function",
          "@id": "pxt:pixeltable.io.import_rows",
          "name": "pixeltable.io.import_rows",
          "identifier": "import_rows",
          "description": "Creates a new base table from a list of dictionaries. The dictionaries must be of the",
          "memberOf": {
            "@type": "SoftwareSourceCode",
            "@id": "pxt:pixeltable.io"
          },
          "sameAs": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/datarows.py#L59",
          "url": "https://github.com/pixeltable/pixeltable/blob/main/pixeltable/pixeltable/io/datarows.py#L59",
          "codeLocation": {
            "startLine": 59,
            "lineCount": 42,
            "relativePath": "pixeltable/pixeltable/io/datarows.py"
          },
          "signature": {
            "parameters": [
              {
                "name": "tbl_path",
                "required": true,
                "type": "str"
              },
              {
                "name": "rows",
                "required": true,
                "type": "list[dict[str, Any]]"
              },
              {
                "name": "schema_overrides",
                "required": false,
                "type": "Optional[dict[str, Any]]",
                "default": "None"
              },
              {
                "name": "primary_key",
                "required": false,
                "type": "str | list[str] | None",
                "default": "None"
              },
              {
                "name": "num_retained_versions",
                "required": false,
                "type": "int",
                "default": "10"
              },
              {
                "name": "comment",
                "required": false,
                "type": "str",
                "default": ""
              }
            ],
            "formatted": "(\n    tbl_path: str,\n    rows: list[dict[str, Any]],\n    schema_overrides: Optional[dict[str, Any]] = None,\n    primary_key: str | list[str] | None = None,\n    num_retained_versions: int = 10,\n    comment: str = ''\n)",
            "returns": "pxt.Table"
          },
          "potentialAction": {
            "@type": "InvokeAction",
            "target": {
              "@type": "EntryPoint",
              "urlTemplate": "pxt:pixeltable.io.import_rows",
              "httpMethod": "GET"
            }
          },
          "category": "utility",
          "parameters": [
            {
              "@type": "PropertyValue",
              "name": "tbl_path",
              "valueType": "Any",
              "description": "The qualified name of the table to create."
            },
            {
              "@type": "PropertyValue",
              "name": "rows",
              "valueType": "Any",
              "description": "The list of dictionaries to import."
            },
            {
              "@type": "PropertyValue",
              "name": "schema_overrides",
              "valueType": "Any",
              "description": "If specified, then columns in `schema_overrides` will be given the specified types\nas described above."
            },
            {
              "@type": "PropertyValue",
              "name": "primary_key",
              "valueType": "Any",
              "description": "The primary key of the table (see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "num_retained_versions",
              "valueType": "Any",
              "description": "The number of retained versions of the table\n(see [`create_table()`][pixeltable.create_table])."
            },
            {
              "@type": "PropertyValue",
              "name": "comment",
              "valueType": "Any",
              "description": "A comment to attach to the table (see [`create_table()`][pixeltable.create_table])."
            }
          ],
          "returns": {
            "@type": "PropertyValue",
            "valueType": "Any",
            "description": "A handle to the newly created [`Table`][pixeltable.Table]."
          }
        }
      ]
    }
  ]
}