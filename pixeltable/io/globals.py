from typing import Any, Optional, Literal

import pixeltable as pxt
from pixeltable import Table


def create_label_studio_project(
        t: Table,
        label_config: str,
        name: Optional[str] = None,
        title: Optional[str] = None,
        media_import_method: Literal['post', 'file', 'url'] = 'url',
        col_mapping: Optional[dict[str, str]] = None,
        sync_immediately: bool = True,
        **kwargs: Any
) -> None:
    # TODO(aaron-siegel): Add link in docstring to a Label Studio howto
    """
    Creates a new Label Studio project and links it to the specified `Table`.

    The required parameter `label_config` specifies the Label Studio project configuration,
    in XML format, as described in the Label Studio documentation. The linked project will
    have one column for each data field in the configuration; for example, if the
    configuration has an entry
    ```
    <Image name="image_obj" value="$image"/>
    ```
    then the linked project will have a column named `image`. In addition, the linked project
    will always have a JSON-typed column `annotations` representing the output.

    By default, Pixeltable will link each of these columns to a column of the specified `Table`
    with the same name. If any of the data fields are missing, an exception will be thrown. If
    the `annotations` column is missing, it will be created. The default names can be overridden
    by specifying an optional `col_mapping`, with Pixeltable column names as keys and Label
    Studio field names as values.

    The API key and URL for a valid Label Studio server must be specified in Pixeltable config. Either:

    * Set the `LABEL_STUDIO_API_KEY` and `LABEL_STUDIO_URL` environment variables; or
    * Specify `api_key` and `url` fields in the `label-studio` section of `$PIXELTABLE_HOME/config.yaml`.

    Args:
        t: The Table to link to.
        label_config: The Label Studio project configuration, in XML format.
        name: An optional name for the new project in Pixeltable. If specified, must be a valid
            Pixeltable identifier and must not be the name of any other external data store
            linked to `t`. If not specified, a default name will be used of the form
            `ls_project_0`, `ls_project_1`, etc.
        title: An optional title for the Label Studio project. This is the title that annotators
            will see inside Label Studio. Unlike `name`, it does not need to be an identifier and
            does not need to be unique. If not specified, the table name `t.get_name()` will be used.
        media_import_method: The method to use when transferring media files to Label Studio:
            - `file`: Media will be sent to Label Studio as a file on the local filesystem. This method can be
                used if Pixeltable and Label Studio are running on the same host.
            - `post`: Media will be sent to Label Studio via HTTP post. This should generally only be used for
                prototyping; due to restrictions in Label Studio, it can only be used with projects that have
                just one data field, and does not scale well.
            - `url`: Media will be sent to Label Studio as externally accessible URLs. This method cannot be
                used with local media files or with media generated by computed columns.
            The default is `url`.
        col_mapping: An optional mapping of local column names to Label Studio fields.
        sync_immediately: If `True`, immediately perform an initial synchronization by
            exporting all rows of the `Table` as Label Studio tasks.
        kwargs: Additional keyword arguments are passed to the `start_project` method in the Label
            Studio SDK, as described here:
            https://labelstud.io/sdk/project.html#label_studio_sdk.project.Project.start_project
    """
    from pixeltable.io.label_studio import LabelStudioProject, ANNOTATIONS_COLUMN

    if name is None:
        all_remotes = t.list_remotes()
        n = 0
        while f'ls_project_{n}' in all_remotes:
            n += 1
        name = f'ls_project_{n}'

    ls_project = LabelStudioProject.create(name, title or t.get_name(), label_config, media_import_method, col_mapping, **kwargs)

    # Create a column to hold the annotations, if one does not yet exist.
    if col_mapping is not None and ANNOTATIONS_COLUMN in col_mapping.values():
        local_annotations_column = next(k for k, v in col_mapping.items() if v == ANNOTATIONS_COLUMN)
    else:
        local_annotations_column = ANNOTATIONS_COLUMN
    if local_annotations_column not in t.column_names():
        t[local_annotations_column] = pxt.JsonType(nullable=True)

    # Link the project to `t`, and sync if appropriate.
    t._link(ls_project)
    if sync_immediately:
        t.sync()
