[project]
name = "pixeltable"
dynamic = ["version"]
description = "AI Data Infrastructure: Declarative, Multimodal, and Incremental"
authors = [{ name = "Pixeltable, Inc.", email = "contact@pixeltable.com" }]
requires-python = ">=3.10"
readme = "README.md"
license = "Apache-2.0"
keywords = [
    "data-science",
    "machine-learning",
    "database",
    "ai",
    "computer-vision",
    "chatbot",
    "ml",
    "artificial-intelligence",
    "feature-engineering",
    "multimodal",
    "mlops",
    "feature-store",
    "vector-database",
    "llm",
    "genai",
]
classifiers = [
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: MacOS",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX :: Linux",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    "numpy>=1.25",
    "pandas>=2.0",
    "pillow>=9.3.0",
    "pillow-heif>=0.15.0",
    "tqdm>=4.64",
    "toml>=0.10",
    "jsonschema>=4.1.0",
    "jmespath>=1.0.1",
    "more-itertools>=10.2",
    "cloudpickle>=2.2.1",
    "psycopg[binary]>=3.1.18",
    "psutil>=5.9.5",
    "sqlalchemy>=2.0.23",
    "pgvector>=0.2.1",
    "av>=10.0.0",
    "beautifulsoup4>=4.10",
    "lxml>=5.1",
    "requests>=2.31.0",
    "httpx>=0.27",
    "httpcore>=1.0.3",
    "nest_asyncio>=1.5",
    "pyyaml>=6.0.1",
    "jinja2>=3.1.3",
    "tenacity>=8.2",
    "puremagic>=1.20",
    "pymupdf>=1.24.1",
    "ftfy>=6.2.0",
    "pydantic>=2.7.4",
    "pyarrow>=13.0.0",
    "pixeltable-pgserver==0.3.1",
]

[project.urls]
homepage = "https://pixeltable.com/"
repository = "https://github.com/pixeltable/pixeltable"
documentation = "https://docs.pixeltable.com/"

[project.entry-points."mkdocstrings.python.templates"]
extension-name = "tool.doc_plugins.mkdocstrings:get_templates_path"

[build-system]
requires = ["hatchling", "uv-dynamic-versioning>=0.8.2"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.uv]
required-version = ">=0.8"
default-groups = ["dev", "test"]
override-dependencies = ["sse-starlette>=2.0"]  # Required because 'fiftyone' hard-codes 'sse-starlette<1'

[tool.uv-dynamic-versioning]
vcs = "git"
style = "pep440"
bump = true

[dependency-groups]
dev = [
    "mypy>=1.16",
    "boto3-stubs==1.36.23",
    "pandas-stubs>=2.0",
    "pyarrow-stubs>=10.0.1.7,<11",
    "types-beautifulsoup4>=4.2",
    "types-jmespath>=1.0",
    "types-jsonschema>=4.1.0",
    "types-pillow>=10.0",
    "types-pycocotools>=2.0",
    "types-pyyaml>=6.0.1,<7",
    "types-requests>=2.31.0",
    "types-sqlalchemy-utils~=1.1",
    "types-toml>=0.10",
    "types-tqdm~=4.64",
    "ruff>=0.9.3,<0.10",
    "notebook>=7.1.0,<8",
    "mkdocs>=1.6.0,<2",
    "mkdocs-material>=9.5.23,<10",
    "mkdocstrings-python>=1.10.2,<2",
    "black>=24.4",
    "pycocotools>=2.0.10",
    "ipykernel>=6.27.1,<7",
    "tabulate>=0.9",
    "nbmake>=1.4.6,<2",
    "mistune>=3.0.2,<4",
    "pyiceberg>=0.6.0",
    "torch~=2.7",
    "torchaudio~=2.7",
    "torchvision>=0.22,<0.23",
    "openai>=1.86.0",
    "anthropic>=0.53.0",
    "together>=1.5.11",
    "fireworks-ai>=0.17.6",
    "mistralai>=1.8.2",
    "replicate>=1.0.7,<2",
    "google-genai>=1.25.0",
    "groq>=0.26.0",
    "boto3==1.36.23",
    "botocore==1.36.23",
    "spacy>=3.8.7",
    "sentencepiece>=0.2.0",
    "tiktoken>=0.9",
    "sentence-transformers~=4.0",
    "transformers~=4.52",
    "timm>=1.0.11,<2",
    "datasets>=3.2.0",
    "openpyxl>=3.1",
    "openai-whisper>=20250625",
    "whisperx>=3.3.4 ; python_version < '3.13' and (sys_platform != 'darwin' or platform_machine != 'x86_64')",
    "label-studio-sdk>=1.0.18",
    "ollama>=0.5.1",
    "llama-cpp-python>=0.3.9 ; sys_platform != 'win32'",
    "mcp>=1.9.4",
    "pixeltable-yolox==0.4.2 ; python_version < '3.13' or sys_platform != 'win32'",
    "fiftyone>=1.7",
]
test = [
    "pytest>=8.4",
    "pytest-xdist[psutil]>=3.8",
    "pytest-rerunfailures>=15.1",
    "coverage>=7.9",
    "filelock>=3.13",
]

[tool.hatch.build.targets.sdist]
exclude = [
    ".pytest_cache",
    ".pytype",
    "docs",
    "local",
    "tests",
    "tool",
]

[tool.hatch.build.targets.wheel]
exclude = [
    ".pytest_cache",
    ".pytype",
    "docs",
    "local",
    "tests",
    "tool",
]

[tool.isort]
force_single_line = false
line_length = 120
multi_line_output = 3  # For ruff compatibility
split_on_trailing_comma = false

[tool.mypy]
allow_redefinition = true
disable_error_code = "no-any-unimported, no-any-return"
disallow_any_unimported = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
follow_imports = "silent"
plugins = "pydantic.mypy, tool/mypy_plugin.py"
show_error_codes = true
strict_optional = false
warn_return_any = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = '''
    -v
    -m "not remote_api and not expensive"
    --strict-markers
    --reruns 2
    --only-rerun 'That Pixeltable operation could not be completed because it conflicted with'
    '''
markers = [
    "expensive: marks tests as expensive to run",
    "remote_api: marks tests as calling a remote API (such as OpenAI)",
]
filterwarnings = [
    "ignore:The `dict` method is deprecated; use `model_dump` instead.:DeprecationWarning",
    "ignore:Pydantic V1 style `@validator` validators are deprecated.:DeprecationWarning",
    "ignore:Pydantic V1 style `@root_validator` validators are deprecated.:DeprecationWarning",
    "ignore:`allow_reuse` is deprecated and will be ignored:DeprecationWarning",
    "ignore:Support for class-based `config` is deprecated:DeprecationWarning",
    # This warning is from Whisper:
    "ignore:FP16 is not supported on CPU:UserWarning",
    # These four warnings are all from WhisperX:
    "ignore:Deprecated call to `pkg_resources:DeprecationWarning",
    "ignore:The get_cmap function was deprecated in Matplotlib 3.7:DeprecationWarning",
    "ignore:pkg_resources is deprecated as an API:",
    "ignore:torchaudio._backend.set_audio_backend:UserWarning",
    # This warning is from `lxml` (when it calls out to `beautifulsoup4`):
    "ignore:The 'strip_cdata' option of HTMLParser:DeprecationWarning",
    # This one is raised by mongoengine, which is required by fiftyone:
    "ignore:No uuidRepresentation is specified! Falling back to 'pythonLegacy' which is the default for pymongo 3.x:DeprecationWarning",
    # This one is raised by huggingface-hub:
    "ignore:`resume_download` is deprecated and will be removed:FutureWarning",
    # LabelStudio:
    "ignore:invalid escape sequence:DeprecationWarning",
    # swigvarlink:
    "ignore:.*builtin type .* has no __module__ attribute.*:DeprecationWarning",
    # Generated by our own code in async eval:
    "ignore::pytest.PytestUnraisableExceptionWarning",
]

[tool.ruff]
exclude = ["*.ipynb"]  # For now, exclude notebooks
line-length = 120

[tool.ruff.lint]
select = ["B", "C", "E", "F", "ICN", "N", "PL", "PYI", "RUF", "SIM", "TD002", "W"]
ignore = [
    "B023",  # Function definition does not bind to loop variable (appears to generate false positives)
    "B027",  # Empty method in abstract base class (I'm not sure why this should be a problem)
    "B905",  # `zip()` without an explicit `strict=` parameter
    # A bunch of rules that are just plain fussy about code complexity:
    "C901", "PLR0904", "PLR0911", "PLR0912", "PLR0913", "PLR0914", "PLR0915", "PLR0916", "PLR0917", "PLR1702",
    "E711",  # None comparison (x == None); needed for Pandas/Pixeltable expressions
    "E712",  # Equality comparisons to `False` (x == False); needed for Pandas/Pixeltable expressions
    "N801",  # Class name should use CapWords convention (we intentionally violate this for aggregate functions)
    "PLC0415",  # Allow imports within functions (I don't see how this linting rule could ever work)
    "PLC1901",  # Allow empty string comparisons
    "PLC2701",  # Allow private name imports
    "PLE0605",  # Invalid format for __all__ (appears to generate false positives)
    "PLR2004",  # Permit "magic values" (numbers that are not defined as constants)
    "PLR6201",  # Don't require set literal for membership tests
    "PLR6301",  # Class method (not sure what to do yet)
    "PLW0108",  # Lambda may be unnecessary (gives false positives, e.g., for an arity-reducing lambda)
    "PLW3201",  # Dunder method has no special meaning (conflicts with _repr_html_)
    "PYI041",  # Use `float` instead of `int | float` (just seems like a questionable idea)
    "SIM105",  # Don't prefer `contextlib.suppress()`
    "SIM108",  # Don't prefer use of ternary if/else operator
    "TD002"  # Don't require author for TODOs
]
preview = true

[tool.ruff.lint.flake8-builtins]
builtins-ignorelist = ["format", "input"]

[tool.ruff.lint.isort]
combine-as-imports = true
known-first-party = ["pixeltable"]
split-on-trailing-comma = false

[tool.ruff.format]
line-ending = "lf"
quote-style = "single"
skip-magic-trailing-comma = true
